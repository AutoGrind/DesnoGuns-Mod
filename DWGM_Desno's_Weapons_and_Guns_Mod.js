/*
This work is licensed under the Creative Commons Attribution- NonCommercial 4.0 International License. To view a copy
of this license, visit http://creativecommons.org/licenses/by-nc/4.0/ or send a letter to Creative Commons, 444 Castro
Street, Suite 900, Mountain View, California, 94041, USA.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

/* ******* Desno's Weapons and Guns Mod by Desno365 ******* */

//updates variables
const CURRENT_VERSION = "r001";
var latestVersion;

//activity and other Android variables
var currentActivity = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
var sdcard = new android.os.Environment.getExternalStorageDirectory();

//display size and density variables
var metrics = new android.util.DisplayMetrics();
currentActivity.getWindowManager().getDefaultDisplay().getMetrics(metrics);
var displayHeight = metrics.heightPixels;
var displayWidth = metrics.widthPixels;
var deviceDensity = metrics.density;
metrics = null;

//tip messages displayed variables
var displayedMessageNoSound = false;

//initialize variables
var initCreativeItems = true;

//change carried item variables
var previousCarriedItem = 0;

// images in base64
var scaled = [];
/* credits to Designmodo for the settings icon that is licensed under the Creative Commons Attribution 3.0 Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by/3.0/ or send a letter to Creative Commons, 444 Castro Street, Suite 900, Mountain View, California, 94041, USA. */
var settingsPng = "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";
var firePng = "";
var sightPng = "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TUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS40LjAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iCiAgICAgICAgICAgIHhtbG5zOnRpZmY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vdGlmZi8xLjAvIgogICAgICAgICAgICB4bWxuczpleGlmPSJodHRwOi8vbnMuYWRvYmUuY29tL2V4aWYvMS4wLyI+CiAgICAgICAgIDx4bXA6TW9kaWZ5RGF0ZT4yMDE0LTExLTA1VDE1OjU5OjM5PC94bXA6TW9kaWZ5RGF0ZT4KICAgICAgICAgPHhtcDpDcmVhdG9yVG9vbD5BZG9iZSBQaG90b3Nob3AgQ0MgKE1hY2ludG9zaCk8L3htcDpDcmVhdG9yVG9vbD4KICAgICAgICAgPHhtcDpDcmVhdGVEYXRlPjIwMTQtMTEtMDVUMTU6NTk6Mzk8L3htcDpDcmVhdGVEYXRlPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICAgICA8dGlmZjpZUmVzb2x1dGlvbj4xNDQ8L3RpZmY6WVJlc29sdXRpb24+CiAgICAgICAgIDx0aWZmOlJlc29sdXRpb25Vbml0PjI8L3RpZmY6UmVzb2x1dGlvblVuaXQ+CiAgICAgICAgIDx0aWZmOlhSZXNvbHV0aW9uPjE0NDwvdGlmZjpYUmVzb2x1dGlvbj4KICAgICAgICAgPGV4aWY6Q29sb3JTcGFjZT42NTUzNTwvZXhpZjpDb2xvclNwYWNlPgogICAgICAgICA8ZXhpZjpQaXhlbFhEaW1lbnNpb24+MTY8L2V4aWY6UGl4ZWxYRGltZW5zaW9uPgogICAgICAgICA8ZXhpZjpQaXhlbFlEaW1lbnNpb24+MTY8L2V4aWY6UGl4ZWxZRGltZW5zaW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4K+FLlKQAAAEFJREFUOBFj/P//PwMesAwqF4VLDRMuCWLFRw1gYKA4DBiB0QiLKmIDHkUdVVyAYiIaB+a60YSEFjDIXIpjgWIDAIKhC7uw8PgTAAAAAElFTkSuQmCC";

//decoded images variables
var settingsPngDecoded = android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(settingsPng, 0), 0, android.util.Base64.decode(settingsPng, 0).length);
var settingsPngScaled;
var firePngDecoded = android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(firePng, 0), 0, android.util.Base64.decode(firePng, 0).length);
var firePngScaled;
var sightPngDecoded = android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(sightPng, 0), 0, android.util.Base64.decode(sightPng, 0).length);
var sightPngScaled;

// general sounds
var sound1;
var sound2;
var sound3;

// gun sounds
var soundPool;
var soundID;

// general value for the weapons accuracy, more this value is less accuracy weapons have
const randomness = 0.55;

// fire button variables
var shotImage;
var currentShotTicks = 0;

// for assault rifles
var shooting = false;
var shootingRunnable;
const assaultRiflesVolume = 0.70;

// for sniper rifles
var latestShotTime;

// for minigun
var minigunTouchingFireButton = false;
const minigunVolume = 0.50;

// bullet speed
const sniperBulletSpeed = 9;
const assaultBulletSpeed = 6.8;
const bazookaBulletSpeed = 5.1;
const pistolBulletSpeed = 6;
const shotgunBulletSpeed = 4.2;

// weapons
const AK47 = { name:"AK47", id:460, fireRate:3, recoil:2, bulletSpeed:assaultBulletSpeed, accuracy:5, zoomLevel:60, sound:"AK47Shoot.ogg", texture:"carrot_golden", ammo:30, smoke:1, recipe:[
	"   ",
	"iri",
	"   "] };

const AK74 = { name:"AK74", id:461, fireRate:3, recoil:3, bulletSpeed:assaultBulletSpeed, accuracy:4, zoomLevel:60, sound:"AK74Shoot.ogg",texture:"carrot_on_a_stick", ammo:30, smoke:1, recipe:[
	"   ",
	"iri",
	"   "] };

const AT4 = { name:"AT4", id:462, fireRate:10, recoil:3, bulletSpeed:bazookaBulletSpeed, hasExplosiveBullets:true, bulletsExplosionRadius:4, bulletsArray:[], accuracy:3.5, zoomLevel:60, sound:"AT4_and_M72LAW_and_Panzerfaust3Shoot.ogg", texture:"cauldron", ammo:1, smoke:4, recipe:[
	"   ",
	"iri",
	"   "] };

const AUG = { name:"AUG", id:463, fireRate:3, recoil:3, bulletSpeed:6.8, accuracy:3, zoomLevel:60, sound:"FNSCAR_and_AUG_and_MTARShoot.ogg", texture:"chestplate", textureNumber:1, ammo:42, smoke:1, recipe:[
	"   ",
	"iri",
	"   "] };

const BARRETT_EXPLOSIVE = { name:"Barrett Explosive", id:464, fireRate:12, recoil:22, bulletSpeed:sniperBulletSpeed, hasExplosiveBullets:true, bulletsExplosionRadius:2, bulletsArray:[], accuracy:3, zoomLevel:60, sound:"BarrettShoot.ogg", texture:"comparator", ammo:10, smoke:2, recipe:[
	"   ",
	"iri",
	"   "] };

const BARRETT = { name:"Barrett", id:465, fireRate:12, recoil:22, bulletSpeed:sniperBulletSpeed, zoomLevel:60, accuracy:2, sound:"BarrettShoot.ogg", texture:"cookie", ammo:10, smoke:2, recipe:[
	"   ",
	"iri",
	"   "] };

const BIZON = { name:"Bizon", id:466, fireRate:2, recoil:3, bulletSpeed:assaultBulletSpeed, accuracy:3, zoomLevel:60, sound:"P90_and_Bizon_and_G3Shoot_and_Minigun.ogg", texture:"diamond_horse_armor", ammo:53, smoke:1, recipe:[
	"   ",
	"iri",
	"   "] };

const DESERT_EAGLE = { name:"Desert Eagle", id:467, fireRate:1, recoil:3, bulletSpeed:pistolBulletSpeed, accuracy:6, zoomLevel:60, sound:"DesertEagleShoot.ogg", texture:"door_iron", ammo:7, smoke:0, recipe:[
	"   ",
	"iri",
	"   "] };

const DESERT_EAGLE_GOLD = { name:"Desert Eagle Gold", id:468, fireRate:1, recoil:3, bulletSpeed:pistolBulletSpeed, accuracy:5, zoomLevel:60, sound:"DesertEagleShoot.ogg", texture:"empty_armor_slot_boots", ammo:7, smoke:0, recipe:[
	"   ",
	"iri",
	"   "] };

const DRAGUNOV = { name:"Dragunov", id:469, fireRate:8, recoil:20, bulletSpeed:sniperBulletSpeed, zoomLevel:60, accuracy:2, sound:"DragunovShoot.ogg", texture:"empty_armor_slot_chestplate", ammo:10, smoke:2, recipe:[
	"   ",
	"iri",
	"   "] };

const FNSCAR = { name:"FNSCAR", id:470, fireRate:3, recoil:3, bulletSpeed:assaultBulletSpeed, accuracy:3, zoomLevel:60, sound:"FNSCAR_and_AUG_and_MTARShoot.ogg", texture:"empty_armor_slot_helmet", ammo:20, smoke:1, recipe:[
	"   ",
	"iri",
	"   "] };

const G3 = { name:"G3", id:471, fireRate:2, recoil:2, bulletSpeed:assaultBulletSpeed, accuracy:2.5, zoomLevel:60, sound:"P90_and_Bizon_and_G3Shoot_and_Minigun.ogg", texture:"empty_armor_slot_leggings", ammo:20, smoke:1, recipe:[
	"   ",
	"iri",
	"   "] };

const G36 = { name:"G36", id:472, fireRate:3, recoil:2, bulletSpeed:assaultBulletSpeed, accuracy:2.5, zoomLevel:60, sound:"G36Shoot.ogg", texture:"ender_eye", ammo:30, smoke:1, recipe:[
	"   ",
	"iri",
	"   "] };

const GL1 = "missing"; // also in the code!!!

const GL6 = "missing"; // also in the code!!!

const GLOCK = { name:"Glock", id:473, fireRate:3, recoil:2, bulletSpeed:pistolBulletSpeed, accuracy:2.5, zoomLevel:60, sound:"GlockShoot.ogg", texture:"fireball", ammo:31, smoke:1, recipe:[
	"   ",
	"iri",
	"   "] };

// id must be changed!
const MINIGUN = { name:"Minigun", id:485, fireRate:1, recoil:2, bulletSpeed:assaultBulletSpeed, accuracy:5.5, zoomLevel:60, sound:"P90_and_Bizon_and_G3Shoot_and_Minigun.ogg", texture:"lead", ammo:500, smoke:3, recipe:[
	"   ",
	"iri",
	"   "] };

// id must be changed!
const SHOTGUN_TEST = { name:"Shotgun", id:486, fireRate:8, recoil:2, bulletSpeed:shotgunBulletSpeed, isShotgun:true, shotgunWidth:3, shotgunBulletsPerLineShot:3, accuracy:5, zoomLevel:60, sound:"M1887Shoot.ogg", texture:"lead", ammo:10, smoke:1, recipe:[
	"   ",
	"iri",
	"   "] };


// all the guns in a single array
var guns = [AK47, AK74, AT4, AUG, BARRETT_EXPLOSIVE, BARRETT, BIZON, DESERT_EAGLE, DESERT_EAGLE_GOLD, DRAGUNOV, FNSCAR, G3, G36, GLOCK, MINIGUN, SHOTGUN_TEST];
var explosiveWeapons = [AT4, BARRETT_EXPLOSIVE];

// add guns
for(var i in guns)
	addNewGun(guns[i]);

// load minigun sounds
var minigunWarmup = new android.media.MediaPlayer();
var minigunSpin = new android.media.MediaPlayer();
minigunSpin.reset();
minigunSpin.setDataSource(sdcard + "/games/com.mojang/dwgm-sounds/MinigunSpin.ogg");
minigunSpin.setLooping(true);
minigunSpin.prepareAsync();

// other items (not guns)
const knifeId = 432;
const knifeMaxDamage = 50;
ModPE.setItem(knifeId, "book_written", 0, "Knife");
Item.setMaxDamage(knifeId, knifeMaxDamage);
Item.addShapedRecipe(knifeId, 1, 0, [
	"iri",
	"r r",
	"iri"], ["i", 265, 0, "r", 331, 0]);


function selectLevelHook()
{
	// when selecting level
	//
}

function newLevel()
{
	if(initCreativeItems)
	{
		for(var i = 0; i < guns.length; i++)
			Player.addItemCreativeInv(guns[i].id, 1);
		Player.addItemCreativeInv(knifeId, 1);
		initCreativeItems = false;
	}
}

function leaveGame()
{
	removeShootAndSettingsButtons();

	displayedMessageNoSound = false;

	previousCarriedItem = 0;

	// release the resources for sounds
	try{
		soundPool.release();
		soundPool = null;
		soundID = null;
	} catch(e){/* soundPool was already released */}

	// fire button variables
	currentShotTicks = 0;

	// for assault rifles
	shooting = false;
	shootingRunnable = null;

	// for minigun
	minigunTouchingFireButton = false;

	// remove explosive bullets
	for(var i in explosiveWeapons)
	{
		for(var j in explosiveWeapons[i].bulletsArray)
		{
			explosiveWeapons[i].bulletsArray.splice(j, 1);
		}
	}
}

function attackHook(attacker, victim)
{
	if(attacker = Player.getEntity())
	{
		// knife
		if(Player.getCarriedItem() == knifeId)
		{
			var health = Entity.getHealth(victim) - 20;
			if(health < 0)
				health = 0;
			Entity.setHealth(victim, health);
			Item.damageCarriedItem();
		}
	}
}

function entityRemovedHook(entity)
{
	// remove explosive bullets
	for(var i in explosiveWeapons)
	{
		for(var j in explosiveWeapons[i].bulletsArray)
		{
			if(entity == explosiveWeapons[i].bulletsArray[j].entity)
				explosiveWeapons[i].bulletsArray.splice(j, 1);
		}
	}
}

function changeCarriedItem(currentItem, previousItem)
{
	// prevent infinite shooting
	currentShotTicks = 0;
	shooting = false;

	// release the resources for sounds
	try{
		soundPool.release();
		soundPool = null;
		soundID = null;
	} catch(e){/* soundPool was already released */}

	if(previousItem == MINIGUN.id)
	{
		try{
			minigunSpin.stop();
			minigunSpin.prepareAsync();
		} catch(e){
			clientMessage(e);
			ModPE.log(e);
			minigunSpin.reset();
			minigunSpin.setDataSource(sdcard + "/games/com.mojang/dwgm-sounds/MinigunSpin.ogg");
			minigunSpin.setLooping(true);
			minigunSpin.prepareAsync();
		}
	}

	// the current item is a gun
	if(currentItem >= 460 && currentItem <= 505)
	{
		if(!(previousItem >= 300 && previousItem <= 345))
			shootAndSettingsButtons();

		// reset clicks and long clicks
		currentActivity.runOnUiThread(new java.lang.Runnable(
		{
			run: function()
			{
				shotImage.setOnTouchListener(new android.view.View.OnTouchListener()
				{
					onTouch: function(v, event)
					{
						return false;
					}
				});
				shotImage.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function(v)
					{
						return false;
					}
				});
			}
		}));

		// assault rifles
		if(currentItem == AK47.id || currentItem == AK74.id || currentItem == AUG.id || currentItem == BIZON.id || currentItem == FNSCAR.id || currentItem == G3.id || currentItem == G36.id || currentItem == GLOCK.id)
		{
			// load current gun
			var currentGun;
			switch(currentItem)
			{
				case AK47.id: currentGun = AK47; break;
				case AK74.id: currentGun = AK74; break;
				case AUG.id: currentGun = AUG; break;
				case BIZON.id: currentGun = BIZON; break;
				case FNSCAR.id: currentGun = FNSCAR; break;
				case G3.id: currentGun = G3; break;
				case G36.id: currentGun = G36; break;
				case GLOCK.id: currentGun = GLOCK; break;

				default: currentGun = AK47;
			}

			// load sounds for the gun
			ModPE.loadSoundPool(sdcard + "/games/com.mojang/dwgm-sounds/" + currentGun.sound);	

			// load touch events
			currentActivity.runOnUiThread(new java.lang.Runnable(
			{
				run: function()
				{
					if(Level.getGameMode() == 1)
						shotImage.setOnTouchListener(new android.view.View.OnTouchListener()
						{
							onTouch: function(v, event)
							{
								assaultRiflesShootCreative(event, currentGun);
								return false;
							}
						});
					if(Level.getGameMode() == 0)
						shotImage.setOnTouchListener(new android.view.View.OnTouchListener()
						{
							onTouch: function(v, event)
							{
								assaultRiflesShootSurvival(event, currentGun);
								return false;
							}
						});
				}
			}));
		}

		// single shot weapons
		if(currentItem == AT4.id || currentItem == BARRETT.id || currentItem == BARRETT_EXPLOSIVE.id || currentItem == DESERT_EAGLE.id || currentItem == DESERT_EAGLE_GOLD.id || currentItem == DRAGUNOV.id || currentItem == SHOTGUN_TEST.id)
		{
			// load current gun
			var currentGun;
			switch(currentItem)
			{
				case AT4.id: currentGun = AT4; break;
				case BARRETT.id: currentGun = BARRETT; break;
				case BARRETT_EXPLOSIVE.id: currentGun = BARRETT_EXPLOSIVE; break;
				case DESERT_EAGLE.id: currentGun = DESERT_EAGLE; break;
				case DESERT_EAGLE_GOLD.id: currentGun = DESERT_EAGLE_GOLD; break;
				case DRAGUNOV.id: currentGun = DRAGUNOV; break;
				case SHOTGUN_TEST.id: currentGun = SHOTGUN_TEST; break;

				default: currentGun = BARRETT;
			}		

			// load click events
			currentActivity.runOnUiThread(new java.lang.Runnable(
			{
				run: function()
				{
					shotImage.setOnClickListener(new android.view.View.OnClickListener()
					{
						onClick: function(v)
						{
							sniperRifleShoot(currentGun);
							return false;
						}
					});
				}
			}));
		}

		// minigun
		if(currentItem == MINIGUN.id)
		{
			currentGun = MINIGUN;

			// load sounds for the gun
			ModPE.loadSoundPool(sdcard + "/games/com.mojang/dwgm-sounds/" + currentGun.sound);

			// load touch events
			currentActivity.runOnUiThread(new java.lang.Runnable(
			{
				run: function()
				{
					if(Level.getGameMode() == 1)
						shotImage.setOnTouchListener(new android.view.View.OnTouchListener()
						{
							onTouch: function(v, event)
							{
								minigunShootCreative(event, currentGun);
								return false;
							}
						});
					if(Level.getGameMode() == 0)
						shotImage.setOnTouchListener(new android.view.View.OnTouchListener()
						{
							onTouch: function(v, event)
							{
								minigunShootSurvival(event, currentGun);
								return false;
							}
						});
				}
			}));
		}

	} else
	{
		if(previousItem >= 300 && previousItem <= 345)
		{
			//the item before was weapon, now not
			removeShootAndSettingsButtons();
		}
	}
}

function modTick()
{
	//change carried item hook
	if(Player.getCarriedItem() != previousCarriedItem)
		changeCarriedItem(Player.getCarriedItem(), previousCarriedItem);
	previousCarriedItem = Player.getCarriedItem();

	// assault rifles shooting system
	if(shooting)
		shootingRunnable.run();
	else
		if(currentShotTicks != 0)
			currentShotTicks = 0;

	// explosive bullets
	for(var i in explosiveWeapons)
	{
		for(var j in explosiveWeapons[i].bulletsArray)
		{
			var arrow = explosiveWeapons[i].bulletsArray[j];
			var xArrow = Entity.getX(arrow.entity);
			var yArrow = Entity.getY(arrow.entity);
			var zArrow = Entity.getZ(arrow.entity);
			if(arrow.previousX == arrow.previousX && arrow.previousY == yArrow && arrow.previousZ == zArrow)
			{
				Level.explode(xArrow, yArrow, zArrow, explosiveWeapons[i].bulletsExplosionRadius);
				
				Entity.remove(arrow.entity);
				explosiveWeapons[i].bulletsArray.splice(j, 1);
			}else
			{
				arrow.previousX = xArrow;
				arrow.previousY = yArrow;
				arrow.previousZ = zArrow;
			}
		}
	}
}


//########################################################################################################################################################
// Added functions (No GUI and No render)
//########################################################################################################################################################


//########## guns functions ##########
Item.damageCarriedGun = function(gun)
{
	var maxDamage = gun.ammo;
	if(Player.getCarriedItemData() < maxDamage)
		Entity.setCarriedItem(Player.getEntity(), Player.getCarriedItem(), Player.getCarriedItemCount(), Player.getCarriedItemData() + 1);
}

function addNewGun(gun)
{
	if(gun.textureNumber > 0)
		ModPE.setItem(gun.id, gun.texture, gun.textureNumber, gun.name, 1);
	else
		ModPE.setItem(gun.id, gun.texture, 0, gun.name, 1);
	addCraftingRecipe(gun.id, 1, gun.recipe);
	Item.setMaxDamage(gun.id, gun.ammo);
}

function assaultRiflesShootSurvival(event, gun)
{
	var action = event.getActionMasked();
	if(action == android.view.MotionEvent.ACTION_CANCEL || action == android.view.MotionEvent.ACTION_UP)
	{
		shooting = false;
		showCloudParticle(gun.smoke);
	}
	else
	{
		if(!shooting)
		{
			shooting = true;
			currentShotTicks = gun.fireRate;
			shootingRunnable = (new java.lang.Runnable(
			{
				run: function()
				{
					if(currentShotTicks == gun.fireRate)
					{
						if(Player.getCarriedItemData() >= gun.ammo)
							ModPE.showTipMessage("Refill your ammo.");
						else
						{
							currentShotTicks = 0;
							ModPE.playLoadedSoundPool(assaultRiflesVolume);
							shootArrow(gun);
							Item.damageCarriedGun(gun);
						}
					}
					currentShotTicks++;
				}
			}));
		}
	}
}

function assaultRiflesShootCreative(event, gun)
{
	var action = event.getActionMasked();
	if(action == android.view.MotionEvent.ACTION_CANCEL || action == android.view.MotionEvent.ACTION_UP)
	{
		shooting = false;
		showCloudParticle(gun.smoke)
	}
	else
	{
		if(!shooting)
		{
			shooting = true;
			currentShotTicks = gun.fireRate;
			shootingRunnable = (new java.lang.Runnable(
			{
				run: function()
				{
					if(currentShotTicks == gun.fireRate)
					{
						currentShotTicks = 0;
						ModPE.playLoadedSoundPool(assaultRiflesVolume);
						shootArrow(gun);
					}
					currentShotTicks++;
				}
			}));
		}
	}
}

function sniperRifleShoot(gun)
{
	if(latestShotTime == null || java.lang.System.currentTimeMillis() > (latestShotTime + (gun.fireRate * 50)))
	{
		if(Level.getGameMode() == 0)
		{
			if(Player.getCarriedItemData() >= gun.ammo)
				ModPE.showTipMessage("Refill your ammo.");
			else
			{
				ModPE.playSoundFromFile(gun.sound);
				if(gun.isShotgun)
					shootArrowShotgun(gun);
				else
					shootArrow(gun);
				Item.damageCarriedGun(gun);
				latestShotTime = java.lang.System.currentTimeMillis();
				showCloudParticle(gun.smoke);
			}
		}

		if(Level.getGameMode() == 1)
		{
			ModPE.playSoundFromFile(gun.sound);
			if(gun.isShotgun)
				shootArrowShotgun(gun);
			else
				shootArrow(gun);
			latestShotTime = java.lang.System.currentTimeMillis();
			showCloudParticle(gun.smoke);
		}
	}
}

function minigunShootSurvival(event)
{
	var action = event.getActionMasked();
	if(action == android.view.MotionEvent.ACTION_CANCEL || action == android.view.MotionEvent.ACTION_UP)
	{
		minigunTouchingFireButton = false;
		if(minigunWarmup.isPlaying())
			minigunWarmup.stop();
		if(shooting)
			showCloudParticle(MINIGUN.smoke);
		shooting = false;
		try{
			minigunSpin.stop();
			minigunSpin.prepareAsync();
		} catch(e){
			clientMessage(e);
			ModPE.log(e);
			minigunSpin.reset();
			minigunSpin.setDataSource(sdcard + "/games/com.mojang/dwgm-sounds/MinigunSpin.ogg");
			minigunSpin.setLooping(true);
			minigunSpin.prepareAsync();
		}
		ModPE.playSoundFromFile("MinigunCooldown.ogg");
	}
	else
	{
		if(!shooting && !minigunTouchingFireButton)
		{
			minigunTouchingFireButton = true;
			minigunWarmup.reset();
			minigunWarmup.setDataSource(sdcard + "/games/com.mojang/dwgm-sounds/MinigunWarmup.ogg");
			minigunWarmup.prepare();
			minigunWarmup.setOnCompletionListener(new android.media.MediaPlayer.OnCompletionListener()
			{
				onCompletion: function(mp)
				{
					if(minigunTouchingFireButton)
					{
						shooting = true;
						minigunSpin.start();
						currentShotTicks = MINIGUN.fireRate;
						shootingRunnable = (new java.lang.Runnable(
						{
							run: function()
							{
								if(currentShotTicks == MINIGUN.fireRate)
								{
									if(Player.getCarriedItemData() >= MINIGUN.ammo)
										ModPE.showTipMessage("Refill your ammo.");
									else
									{
										currentShotTicks = 0;
										ModPE.playLoadedSoundPool(minigunVolume);
										shootArrow(MINIGUN);
										Item.damageCarriedGun(MINIGUN);
									}
								}
								currentShotTicks++;
							}
						}));
					}
				}
			});
			minigunWarmup.start();
		}
	}
}

function minigunShootCreative(event)
{
	var action = event.getActionMasked();
	if(action == android.view.MotionEvent.ACTION_CANCEL || action == android.view.MotionEvent.ACTION_UP)
	{
		minigunTouchingFireButton = false;
		if(minigunWarmup.isPlaying())
			minigunWarmup.stop();
		if(shooting)
			showCloudParticle(MINIGUN.smoke);
		shooting = false;
		try{
			minigunSpin.stop();
			minigunSpin.prepareAsync();
		} catch(e){
			clientMessage(e);
			ModPE.log(e);
			minigunSpin.reset();
			minigunSpin.setDataSource(sdcard + "/games/com.mojang/dwgm-sounds/MinigunSpin.ogg");
			minigunSpin.setLooping(true);
			minigunSpin.prepareAsync();
		}
		ModPE.playSoundFromFile("MinigunCooldown.ogg");
	}
	else
	{
		if(!shooting && !minigunTouchingFireButton)
		{
			minigunTouchingFireButton = true;
			minigunWarmup.reset();
			minigunWarmup.setDataSource(sdcard + "/games/com.mojang/dwgm-sounds/MinigunWarmup.ogg");
			minigunWarmup.prepare();
			minigunWarmup.setOnCompletionListener(new android.media.MediaPlayer.OnCompletionListener()
			{
				onCompletion: function(mp)
				{
					if(minigunTouchingFireButton)
					{
						shooting = true;
						minigunSpin.start();
						currentShotTicks = MINIGUN.fireRate;
						shootingRunnable = (new java.lang.Runnable(
						{
							run: function()
							{
								if(currentShotTicks == MINIGUN.fireRate)
								{
									currentShotTicks = 0;
									ModPE.playLoadedSoundPool(minigunVolume);
									shootArrow(MINIGUN);
								}
								currentShotTicks++;
							}
						}));
					}
				}
			});
			minigunWarmup.start();
		}
	}
}

function shootArrowShotgun(gun)
{
	var playerDir = lookDir(getYaw(), getPitch());
	var bulletsPerShotForXY = gun.shotgunWidth / (gun.shotgunBulletsPerLineShot - 1) * 2;
	for(var i = -gun.shotgunWidth; i <= gun.shotgunWidth; i += bulletsPerShotForXY)
	{
		for(var j = -gun.shotgunWidth; j <= gun.shotgunWidth; j += bulletsPerShotForXY)
		{
			var yawAccuracyValue = ( (Math.random() * randomness) - (randomness / 2) ) * gun.accuracy;
			var pitchAccuracyValue = ( (Math.random() * randomness) - (randomness / 2) ) * gun.accuracy;
			var gunShootDir = lookDir(getYaw() + yawAccuracyValue + i, getPitch() + pitchAccuracyValue + j);

			var arrow = Level.spawnMob(getPlayerX() + (playerDir.x * 2), getPlayerY() + (playerDir.y * 2.5), getPlayerZ() + (playerDir.z * 2), 80);
			setVelX(arrow, gunShootDir.x * gun.bulletSpeed);
			setVelY(arrow, gunShootDir.y * gun.bulletSpeed);
			setVelZ(arrow, gunShootDir.z * gun.bulletSpeed);

			if(gun.hasExplosiveBullets)
				gun.bulletsArray.push(new arrowObject(arrow));
		}
	}
}

function shootArrow(gun)
{
	var yawAccuracyValue = ( (Math.random() * randomness) - (randomness / 2) ) * gun.accuracy;
	var pitchAccuracyValue = ( (Math.random() * randomness) - (randomness / 2) ) * gun.accuracy;
	var gunShootDir = lookDir(getYaw() + yawAccuracyValue, getPitch() + pitchAccuracyValue);

	var arrow = Level.spawnMob(getPlayerX() + (gunShootDir.x * 2), getPlayerY() + (gunShootDir.y * 2.5), getPlayerZ() + (gunShootDir.z * 2), 80);
	setVelX(arrow, gunShootDir.x * gun.bulletSpeed);
	setVelY(arrow, gunShootDir.y * gun.bulletSpeed);
	setVelZ(arrow, gunShootDir.z * gun.bulletSpeed);

	if(gun.hasExplosiveBullets)
		gun.bulletsArray.push(new arrowObject(arrow));
}

function showCloudParticle(amount)
{
	new android.os.Handler().postDelayed(new java.lang.Runnable({run: function()
	{
		var gunDir = lookDir(getYaw() + 30, getPitch());
		for(var i = 0; i < amount; i++)
			Level.addParticle(4, getPlayerX() + (gunDir.x * 1.5), getPlayerY() + (gunDir.y * 1.5), getPlayerZ() + (gunDir.z * 1.5), 0, 0, 0, 1);
	}}), 250);
}
//########## guns functions - END ##########

//########## sounds functions ##########
ModPE.playSoundFromFile = function(fileName)
{
	try
	{
		if(sound1 == null || !sound1.isPlaying())
		{
			if(sound1 == null)
				sound1 = new android.media.MediaPlayer();
			sound1.reset();
			sound1.setDataSource(sdcard + "/games/com.mojang/dwgm-sounds/" + fileName);
			sound1.prepare();
			sound1.setOnCompletionListener(new android.media.MediaPlayer.OnCompletionListener()
			{
				onCompletion: function(mp)
				{
					sound1.release();
					sound1 = null;
				}
			});
			sound1.start();
			return;
		}
		if(sound2 == null || !sound2.isPlaying())
		{
			if(sound2 == null)
				sound2 = new android.media.MediaPlayer();
			sound2.reset();
			sound2.setDataSource(sdcard + "/games/com.mojang/dwgm-sounds/" + fileName);
			sound2.prepare();
			sound2.setOnCompletionListener(new android.media.MediaPlayer.OnCompletionListener()
			{
				onCompletion: function(mp)
				{
					sound2.release();
					sound2 = null;
				}
			});
			sound2.start();
			return;
		}else
		{
			if(sound3 == null)
				sound3 = new android.media.MediaPlayer();
			sound3.reset();
			sound3.setDataSource(sdcard + "/games/com.mojang/dwgm-sounds/" + fileName);
			sound3.prepare();
			sound3.setOnCompletionListener(new android.media.MediaPlayer.OnCompletionListener()
			{
				onCompletion: function(mp)
				{
					sound3.release();
					sound3 = null;
				}
			});
			sound3.start();
		}
	}catch(err)
	{
		if(!displayedMessageNoSound)
		{
			ModPE.showTipMessage("DWGM: Sounds not installed!");
			displayedMessageNoSound = true;
			ModPE.log("DWGM: Error: " + err);
		}
	}
}

ModPE.loadSoundPool = function(path)
{
	try
	{
		soundPool = new android.media.SoundPool(10, android.media.AudioManager.STREAM_MUSIC, 0);
		soundID = soundPool.load(path, 1);
	} catch(e)
	{
		ModPE.showTipMessage("DWGM: Sounds not installed!");
		ModPE.log("DWGM: Error: " + err);
	}
}

ModPE.playLoadedSoundPool = function(volume)
{
	try
	{
		soundPool.play(soundID, volume, volume, 1, 0, 1.0);
	} catch(e){ /* probably sounds not installed error */ }
}
//########## sounds functions - END ##########

//########## shoot functions ##########
function shootAndSettingsButtons()
{
	currentActivity.runOnUiThread(new java.lang.Runnable(
	{
		run: function()
		{
			try
			{
				var settingsImageSquareLength = settingsPngDecoded.getHeight();
				var settingsImageSquareLengthScaled = settingsImageSquareLength * deviceDensity * 0.3;
				var matrix1 = new android.graphics.Matrix();
				matrix1.postScale(settingsImageSquareLengthScaled / settingsImageSquareLength, settingsImageSquareLengthScaled / settingsImageSquareLength);
				settingsPngScaled = new android.graphics.Bitmap.createBitmap(settingsPngDecoded, 0, 0, settingsImageSquareLength, settingsImageSquareLength, matrix1, true);
				
				popupSettingsImage = new android.widget.PopupWindow();
				var layoutSettingsImage = new android.widget.RelativeLayout(currentActivity);
				
				var settingsImage = new android.widget.ImageView(currentActivity);
				settingsImage.setImageBitmap(settingsPngScaled);
				settingsImage.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function()
					{
						informationsForWeaponsModUI();
					}
				}));
				layoutSettingsImage.addView(settingsImage);

				popupSettingsImage.setContentView(layoutSettingsImage);
				popupSettingsImage.setWidth(settingsImageSquareLengthScaled);
				popupSettingsImage.setHeight(settingsImageSquareLengthScaled);
				popupSettingsImage.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
				popupSettingsImage.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.CENTER, 0, 0);



				var sightImageSquareLength = sightPngDecoded.getHeight();
				var sightImageSquareLengthScaled = sightImageSquareLength * deviceDensity;
				var matrix3 = new android.graphics.Matrix();
				matrix3.postScale(sightImageSquareLengthScaled / sightImageSquareLength, sightImageSquareLengthScaled / sightImageSquareLength);
				sightPngScaled = new android.graphics.Bitmap.createBitmap(sightPngDecoded, 0, 0, sightImageSquareLength, sightImageSquareLength, matrix3, false);
				
				popupSightImage = new android.widget.PopupWindow();
				var layoutSightImage = new android.widget.RelativeLayout(currentActivity);
				
				var sightImage = new android.widget.ImageView(currentActivity);
				sightImage.setImageBitmap(sightPngScaled);
				layoutSightImage.addView(sightImage);

				popupSightImage.setContentView(layoutSightImage);
				popupSightImage.setWidth(sightImageSquareLengthScaled);
				popupSightImage.setHeight(sightImageSquareLengthScaled);
				popupSightImage.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
				popupSightImage.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.CENTER | android.view.Gravity.CENTER, 0, 0);



				var imageShotWidth = firePngDecoded.getWidth();
				var imageShotHeight = firePngDecoded.getHeight();
				var imageShotHeightScaled = imageShotHeight * deviceDensity * 0.5;
				var imageShotWidthScaled = imageShotHeightScaled * (imageShotWidth / imageShotHeight);
				var matrix2 = new android.graphics.Matrix();
				matrix2.postScale(imageShotWidthScaled / imageShotWidth, imageShotHeightScaled / imageShotHeight);
				firePngScaled = new android.graphics.Bitmap.createBitmap(firePngDecoded, 0, 0, imageShotWidth, imageShotHeight, matrix2, false);

				popupShot = new android.widget.PopupWindow();
				var layoutShot = new android.widget.RelativeLayout(currentActivity);

				shotImage = new android.widget.ImageView(currentActivity);
				shotImage.setImageBitmap(firePngScaled);
				shotImage.setOnGenericMotionListener(new android.view.View.OnGenericMotionListener()
				{
					onGenericMotion: function(v, event)
					{
						return false;
					}
				});
				shotImage.setOnLongClickListener(new android.view.View.OnLongClickListener()
				{
					onLongClick: function(v)
					{
						return false;
					}
				});
				shotImage.setOnHoverListener(new android.view.View.OnHoverListener()
				{
					onHover: function(v, event)
					{
						return false;
					}
				});
				layoutShot.addView(shotImage);

				popupShot.setContentView(layoutShot);
				popupShot.setWidth(imageShotWidthScaled);
				popupShot.setHeight(imageShotHeightScaled);
				popupShot.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
				popupShot.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.CENTER, 0, 0);
				
			}catch(err)
			{
				clientMessage("Error: " + err);
			}
		}
	}));
}

function removeShootAndSettingsButtons()
{
	currentActivity.runOnUiThread(new java.lang.Runnable(
	{
		run: function()
		{
			try{
				popupShot.dismiss();
			} catch (e){}
			try{
				popupSettingsImage.dismiss();
			} catch (e){}
			try{
				popupSightImage.dismiss();
			} catch (e){}
		}
	}));
	currentShotTicks = 0;
}
//########## shoot functions - END ##########

//########## other functions ##########
function vector3d(x, y, z)
{
	this.x = x;
	this.y = y;
	this.z = z;
}

function lookDir(yaw, pitch)
{
	var direction = new vector3d(0, 0, 0);
	direction.y = -Math.sin(java.lang.Math.toRadians(pitch));
	direction.x = -Math.sin(java.lang.Math.toRadians(yaw)) * Math.cos(java.lang.Math.toRadians(pitch));
	direction.z = Math.cos(java.lang.Math.toRadians (yaw)) * Math.cos(java.lang.Math.toRadians(pitch));
	return direction;
}

function arrowObject(entity)
{
	this.entity = entity;
	this.previousX = 0;
	this.previousY = 0;
	this.previousZ = 0;
}

function addCraftingRecipe(id, howMany, recipe)
{
	// here add other items for crafting with the chosen letter.
	Item.addShapedRecipe(id, howMany, 0, recipe, ["s", 280, 0, "i", 265, 0, "r", 331, 0]);
}

Item.damageCarriedItem = function()
{
	if(Level.getGameMode() == 0)
	{
		var maxDamage;
		if(Player.getCarriedItem() == knifeId)
			maxDamage = knifeMaxDamage;
		if(Player.getCarriedItemData() < maxDamage)
			Entity.setCarriedItem(Player.getEntity(), Player.getCarriedItem(), Player.getCarriedItemCount(), Player.getCarriedItemData() + 1);
		else
		{
			Level.playSoundEnt(Player.getEntity(), "random.break", 100, 30);
			if(Player.getCarriedItemCount() == 1)
				Player.clearInventorySlot(Player.getSelectedSlotId());
			else
				Entity.setCarriedItem(Player.getEntity(), Player.getCarriedItem(), Player.getCarriedItemCount() - 1, 0);
		}
	}
}

function dismissAllUIs()
{
	try{
		popupBlack.dismiss();
	}catch(e){}
}
//########## other functions - END ##########


//########################################################################################################################################################
// GUI functions
//########################################################################################################################################################

function informationsForWeaponsModUI()
{
	//
	clientMessage("WIP");
}

