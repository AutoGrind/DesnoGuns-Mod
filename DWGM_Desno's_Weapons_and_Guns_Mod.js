/*
This work is licensed under the Creative Commons Attribution- NonCommercial 4.0 International License. To view a copy
of this license, visit http://creativecommons.org/licenses/by-nc/4.0/ or send a letter to Creative Commons, 444 Castro
Street, Suite 900, Mountain View, California, 94041, USA.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

/* ******* Desno's Weapons and Guns Mod by Desno365 ******* */

//updates variables
const CURRENT_VERSION = "r001";
var latestVersion;

//activity and other Android variables
var currentActivity = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
var sdcard = new android.os.Environment.getExternalStorageDirectory();

//display size and density variables
var metrics = new android.util.DisplayMetrics();
currentActivity.getWindowManager().getDefaultDisplay().getMetrics(metrics);
var displayHeight = metrics.heightPixels;
var displayWidth = metrics.widthPixels;
var deviceDensity = metrics.density;
metrics = null;

// font variables
var minecraftFont = "";
writeFileFromByteArray(android.util.Base64.decode(minecraftFont, 0), sdcard + "/minecraft.ttf");
var font = new android.graphics.Typeface.createFromFile(sdcard + "/minecraft.ttf");
deleteFile(sdcard + "/minecraft.ttf");

//tip messages displayed variables
var displayedMessageNoSound = false;
var displayedMessageMedicalKit = false;

//initialize variables
var initCreativeItems = true;

//change carried item variables
var previousCarriedItem = 0;
var previousSlotId = 0;

// images in base64
var scaled = [];
/* credits to Designmodo for the settings icon that is licensed under the Creative Commons Attribution 3.0 Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by/3.0/ or send a letter to Creative Commons, 444 Castro Street, Suite 900, Mountain View, California, 94041, USA. */
var settingsPng = "";
var sightPng = "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TUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS40LjAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iCiAgICAgICAgICAgIHhtbG5zOnRpZmY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vdGlmZi8xLjAvIgogICAgICAgICAgICB4bWxuczpleGlmPSJodHRwOi8vbnMuYWRvYmUuY29tL2V4aWYvMS4wLyI+CiAgICAgICAgIDx4bXA6TW9kaWZ5RGF0ZT4yMDE0LTExLTA1VDE1OjU5OjM5PC94bXA6TW9kaWZ5RGF0ZT4KICAgICAgICAgPHhtcDpDcmVhdG9yVG9vbD5BZG9iZSBQaG90b3Nob3AgQ0MgKE1hY2ludG9zaCk8L3htcDpDcmVhdG9yVG9vbD4KICAgICAgICAgPHhtcDpDcmVhdGVEYXRlPjIwMTQtMTEtMDVUMTU6NTk6Mzk8L3htcDpDcmVhdGVEYXRlPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICAgICA8dGlmZjpZUmVzb2x1dGlvbj4xNDQ8L3RpZmY6WVJlc29sdXRpb24+CiAgICAgICAgIDx0aWZmOlJlc29sdXRpb25Vbml0PjI8L3RpZmY6UmVzb2x1dGlvblVuaXQ+CiAgICAgICAgIDx0aWZmOlhSZXNvbHV0aW9uPjE0NDwvdGlmZjpYUmVzb2x1dGlvbj4KICAgICAgICAgPGV4aWY6Q29sb3JTcGFjZT42NTUzNTwvZXhpZjpDb2xvclNwYWNlPgogICAgICAgICA8ZXhpZjpQaXhlbFhEaW1lbnNpb24+MTY8L2V4aWY6UGl4ZWxYRGltZW5zaW9uPgogICAgICAgICA8ZXhpZjpQaXhlbFlEaW1lbnNpb24+MTY8L2V4aWY6UGl4ZWxZRGltZW5zaW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4K+FLlKQAAAEFJREFUOBFj/P//PwMesAwqF4VLDRMuCWLFRw1gYKA4DBiB0QiLKmIDHkUdVVyAYiIaB+a60YSEFjDIXIpjgWIDAIKhC7uw8PgTAAAAAElFTkSuQmCC";
var barretUI = "";
var dragunovUI = "";
var m21UI = "";
var m40a3UI = "";
var r700UI = "";

//decoded images variables
var settingsPngDecoded = android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(settingsPng, 0), 0, android.util.Base64.decode(settingsPng, 0).length);
var settingsPngScaled;
var sightPngDecoded = android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(sightPng, 0), 0, android.util.Base64.decode(sightPng, 0).length);
var sightPngScaled;
var barretUIDecoded = android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(barretUI, 0), 0, android.util.Base64.decode(barretUI, 0).length);
var barretUIScaled;
/*var dragunovUIDecoded = android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(dragunovUI, 0), 0, android.util.Base64.decode(dragunovUI, 0).length);
var dragunovUIScaled;
var m21UIDecoded = android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(m21UI, 0), 0, android.util.Base64.decode(m21UI, 0).length);
var m21UIScaled;
var m40a3UIDecoded = android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(m40a3UI, 0), 0, android.util.Base64.decode(m40a3UI, 0).length);
var m40a3UIScaled;
var r700UIDecoded = android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(r700UI, 0), 0, android.util.Base64.decode(r700UI, 0).length);
var r700UIScaled;*/

// variables for guns
var ammoText;
var isRefilling = false;
var refillingGun;

// general sounds
var sound1;
var sound2;
var sound3;
var refillSound = new android.media.MediaPlayer();

// gun sounds
var soundPool;
var soundID;

// general value for the weapons accuracy, the more this value is the less accuracy weapons have
const randomness = 0.55;

// workaround for returning arrows variable
var deathWorkaround = false;

// aiming variables
var aiming = false;
var zoomWithFov = 72;
var aimingGun;

// fire button variables
var shotText;
var currentShotTicks = 0;

// for assault rifles
var shooting = false;
var shootingRunnable;
var onClickRunnable;
const assaultRiflesVolume = 0.70;

// for sniper rifles
var latestShotTime;

// for minigun
var minigunTouchingFireButton = false;
const minigunVolume = 0.50;

// bullet speed
const SNIPER_BULLET_SPEED = 9;
const ASSAULT_BULLET_SPEED = 6.8;
const BAZOOKA_BULLET_SPEED = 4.8;
const PISTOL_BULLET_SPEED = 6;
const SHOTGUN_BULLET_SPEED = 4.2;
const GRENADE_LAUNCHER_BULLET_SPEED = 3.3;

// zoom level
const ZOOM_SNIPER = 35;
const ZOOM_ASSAULT = 25;
const ZOOM_BAZOOKA = 12;
const ZOOM_MACHINE = 18;
const ZOOM_SHOTGUN = 15;
const ZOOM_GRENADE_LAUNCHER = 10;
const ZOOM_PISTOL = 13;

// guns type
const GUN_TYPE_ASSAULT_RIFLE = 1;
const GUN_TYPE_SUB_MACHINE = 2;
const GUN_TYPE_LIGHT_MACHINE = 3;
const GUN_TYPE_SNIPER_RIFLE = 4;
const GUN_TYPE_SHOTGUN = 5;
const GUN_TYPE_MACHINE_PISTOL = 6;
const GUN_TYPE_HANDGUN = 7;
const GUN_TYPE_LAUNCHER = 8;
const GUN_TYPE_MINIGUN = 9;

// button type
const BUTTON_TYPE_ON_TOUCH = 1;
const BUTTON_TYPE_ON_CLICK = 2;
const BUTTON_TYPE_ON_TOUCH_WITH_WAIT = 3;

// weapons
const AK47 = {
	gunType:GUN_TYPE_ASSAULT_RIFLE, type:BUTTON_TYPE_ON_TOUCH,
	name:"AK47", id:460, fireRate:3, recoil:2, bulletSpeed:ASSAULT_BULLET_SPEED, accuracy:5, zoomLevel:ZOOM_ASSAULT, sound:"AK47Shoot.ogg", refillSound:"MP44Reload.ogg", texture:"carrot_golden", ammo:30, smoke:1, recipe:[
		"   ",
		"iri",
		"   "]
};

const AK74 = {
	gunType:GUN_TYPE_ASSAULT_RIFLE, type:BUTTON_TYPE_ON_TOUCH,
	name:"AK74", id:461, fireRate:3, recoil:3, bulletSpeed:ASSAULT_BULLET_SPEED, accuracy:4, zoomLevel:ZOOM_ASSAULT, sound:"AK74Shoot.ogg", refillSound:"MP40Reload.ogg", texture:"carrot_on_a_stick", ammo:30, smoke:1, recipe:[
		"   ",
		"iri",
		"   "]
};

const AT4 = {
	gunType:GUN_TYPE_LAUNCHER, type:BUTTON_TYPE_ON_CLICK,
	name:"AT4", id:462, fireRate:10, recoil:3, bulletSpeed:BAZOOKA_BULLET_SPEED, hasExplosiveBullets:true, bulletsExplosionRadius:4, bulletsArray:[], accuracy:3.5, zoomLevel:ZOOM_BAZOOKA, sound:"AT4_and_M72LAW_and_Panzerfaust3Shoot.ogg", refillSound:"BazookaReload.ogg", texture:"cauldron", ammo:1, smoke:4, recipe:[
		"   ",
		"iri",
		"   "]
};

const AUG = {
	gunType:GUN_TYPE_ASSAULT_RIFLE, type:BUTTON_TYPE_ON_TOUCH,
	name:"AUG", id:463, fireRate:3, recoil:3, bulletSpeed:6.8, accuracy:3, zoomLevel:ZOOM_ASSAULT, sound:"FNSCAR_and_AUG_and_MTARShoot.ogg", refillSound:"MP44Reload.ogg", texture:"chestplate", textureNumber:1, ammo:42, smoke:1, recipe:[
		"   ",
		"iri",
		"   "]
};

const BARRETT_EXPLOSIVE = {
	gunType:GUN_TYPE_SNIPER_RIFLE, type:BUTTON_TYPE_ON_CLICK,
	name:"Barrett Explosive", id:464, fireRate:12, recoil:22, bulletSpeed:SNIPER_BULLET_SPEED, hasExplosiveBullets:true, bulletsExplosionRadius:2, bulletsArray:[], accuracy:3, zoomLevel:ZOOM_SNIPER, sound:"BarrettShoot.ogg", refillSound:"BARReload.ogg", texture:"comparator", ammo:10, smoke:2, recipe:[
		"   ",
		"iri",
		"   "]
};

const BARRETT = {
	gunType:GUN_TYPE_SNIPER_RIFLE, type:BUTTON_TYPE_ON_CLICK,
	name:"Barrett", id:465, fireRate:12, recoil:22, bulletSpeed:SNIPER_BULLET_SPEED, zoomLevel:ZOOM_SNIPER, accuracy:2, sound:"BarrettShoot.ogg", refillSound:"BARReload.ogg", texture:"cookie", ammo:10, smoke:2, recipe:[
		"   ",
		"iri",
		"   "]
};

const BIZON = {
	gunType:GUN_TYPE_SUB_MACHINE, type:BUTTON_TYPE_ON_TOUCH,
	name:"Bizon", id:466, fireRate:2, recoil:3, bulletSpeed:ASSAULT_BULLET_SPEED, accuracy:3, zoomLevel:ZOOM_MACHINE, sound:"P90_and_Bizon_and_G3Shoot_and_Minigun.ogg", refillSound:"MP40Reload.ogg", texture:"diamond_horse_armor", ammo:53, smoke:1, recipe:[
		"   ",
		"iri",
		"   "]
};

const DESERT_EAGLE = {
	gunType:GUN_TYPE_HANDGUN, type:BUTTON_TYPE_ON_CLICK,
	name:"Desert Eagle", id:467, fireRate:1, recoil:3, bulletSpeed:PISTOL_BULLET_SPEED, accuracy:6, zoomLevel:ZOOM_PISTOL, sound:"DesertEagleShoot.ogg", refillSound:"LugerReload.ogg", texture:"door_iron", ammo:7, smoke:0, recipe:[
		"   ",
		"iri",
		"   "]
};

const DESERT_EAGLE_GOLD = {
	gunType:GUN_TYPE_HANDGUN, type:BUTTON_TYPE_ON_CLICK,
	name:"Desert Eagle Gold", id:468, fireRate:1, recoil:3, bulletSpeed:PISTOL_BULLET_SPEED, accuracy:5, zoomLevel:ZOOM_PISTOL, sound:"DesertEagleShoot.ogg", refillSound:"LugerReload.ogg", texture:"empty_armor_slot_boots", ammo:7, smoke:0, recipe:[
		"   ",
		"iri",
		"   "]
};

const DRAGUNOV = {
	gunType:GUN_TYPE_SNIPER_RIFLE, type:BUTTON_TYPE_ON_CLICK,
	name:"Dragunov", id:469, fireRate:8, recoil:20, bulletSpeed:SNIPER_BULLET_SPEED, zoomLevel:ZOOM_SNIPER, accuracy:2, sound:"DragunovShoot.ogg", refillSound:"BARReload.ogg", texture:"empty_armor_slot_chestplate", ammo:10, smoke:2, recipe:[
		"   ",
		"iri",
		"   "]
};

const FNSCAR = {
	gunType:GUN_TYPE_ASSAULT_RIFLE, type:BUTTON_TYPE_ON_TOUCH,
	name:"FNSCAR", id:470, fireRate:3, recoil:3, bulletSpeed:ASSAULT_BULLET_SPEED, accuracy:3, zoomLevel:ZOOM_ASSAULT, sound:"FNSCAR_and_AUG_and_MTARShoot.ogg", refillSound:"MP44Reload.ogg", texture:"empty_armor_slot_helmet", ammo:20, smoke:1, recipe:[
		"   ",
		"iri",
		"   "]
};

const G3 = {
	gunType:GUN_TYPE_ASSAULT_RIFLE, type:BUTTON_TYPE_ON_TOUCH,
	name:"G3", id:471, fireRate:2, recoil:2, bulletSpeed:ASSAULT_BULLET_SPEED, accuracy:2.5, zoomLevel:ZOOM_ASSAULT, sound:"P90_and_Bizon_and_G3Shoot_and_Minigun.ogg", refillSound:"ThompsonReload.ogg", texture:"empty_armor_slot_leggings", ammo:20, smoke:1, recipe:[
		"   ",
		"iri",
		"   "]
};

const G36 = {
	gunType:GUN_TYPE_ASSAULT_RIFLE, type:BUTTON_TYPE_ON_TOUCH,
	name:"G36", id:472, fireRate:3, recoil:2, bulletSpeed:ASSAULT_BULLET_SPEED, accuracy:2.5, zoomLevel:ZOOM_ASSAULT, sound:"G36Shoot.ogg", refillSound:"MP40Reload.ogg", texture:"ender_eye", ammo:30, smoke:1, recipe:[
		"   ",
		"iri",
		"   "]
};

const GL1 = {
	gunType:GUN_TYPE_LAUNCHER, type:BUTTON_TYPE_ON_CLICK,
	name:"GL1", id:473, fireRate:15, recoil:14, bulletSpeed:GRENADE_LAUNCHER_BULLET_SPEED, isGrenadeLauncher:true, grenadeExplosionRadius:4, grenadesArray:[], accuracy:10, zoomLevel:ZOOM_GRENADE_LAUNCHER, sound:"GrenadeLauncherShoot.ogg", refillSound:"GrenadeLauncherReload.ogg", texture:"ender_pearl", ammo:1, smoke:0, recipe:[
		"   ",
		"iri",
		"   "]
};

const GL6 = {
	gunType:GUN_TYPE_LAUNCHER, type:BUTTON_TYPE_ON_CLICK,
	name:"GL6", id:474, fireRate:1, recoil:10, bulletSpeed:GRENADE_LAUNCHER_BULLET_SPEED, isGrenadeLauncher:true, grenadeExplosionRadius:4, grenadesArray:[], accuracy:15, zoomLevel:ZOOM_GRENADE_LAUNCHER, sound:"GrenadeLauncherShoot.ogg", refillSound:"GL6Reload.ogg", texture:"experience_bottle", ammo:6, smoke:0, recipe:[
		"   ",
		"iri",
		"   "]
};

const GLOCK = {
	gunType:GUN_TYPE_MACHINE_PISTOL, type:BUTTON_TYPE_ON_TOUCH,
	name:"Glock", id:475, fireRate:3, recoil:2, bulletSpeed:PISTOL_BULLET_SPEED, accuracy:2.5, zoomLevel:ZOOM_PISTOL, sound:"GlockShoot.ogg", refillSound:"ColtReload.ogg", texture:"fireball", ammo:31, smoke:1, recipe:[
		"   ",
		"iri",
		"   "]
};

const L86 = {
	gunType:GUN_TYPE_LIGHT_MACHINE, type:BUTTON_TYPE_ON_TOUCH,
	name:"L86", id:476, fireRate:3, recoil:6, bulletSpeed:ASSAULT_BULLET_SPEED, accuracy:4, zoomLevel:ZOOM_MACHINE, sound:"M249_and_L86Shoot.ogg", refillSound:"BrowningReload.ogg", texture:"fireworks", ammo:100, smoke:2, recipe:[
		"   ",
		"iri",
		"   "]
};

const L96 = {
	gunType:GUN_TYPE_SNIPER_RIFLE, type:BUTTON_TYPE_ON_CLICK,
	name:"L96", id:477, fireRate:26, recoil:15, bulletSpeed:SNIPER_BULLET_SPEED, zoomLevel:ZOOM_SNIPER, accuracy:2, sound:"L96Shoot.ogg", refillSound:"BARReload.ogg", texture:"fireworks_charge", ammo:10, smoke:1, recipe:[
		"   ",
		"iri",
		"   "]
};

const M9 = {
	gunType:GUN_TYPE_HANDGUN, type:BUTTON_TYPE_ON_CLICK,
	name:"M9", id:478, fireRate:1, recoil:1, bulletSpeed:PISTOL_BULLET_SPEED, accuracy:8, zoomLevel:ZOOM_PISTOL, sound:"M9Shoot.ogg", refillSound:"ColtReload.ogg", texture:"fireworks_charge_overlay", ammo:15, smoke:0, recipe:[
		"   ",
		"iri",
		"   "]
};

const M14 = {
	gunType:GUN_TYPE_ASSAULT_RIFLE, type:BUTTON_TYPE_ON_CLICK,
	name:"M14", id:479, fireRate:1, recoil:4, bulletSpeed:ASSAULT_BULLET_SPEED, zoomLevel:ZOOM_ASSAULT, accuracy:2, sound:"M14_and_M16A4Shoot.ogg", refillSound:"BARReload.ogg", texture:"fishing_rod_cast", ammo:20, smoke:0, recipe:[
		"   ",
		"iri",
		"   "]
};

const M16A4 = {
	gunType:GUN_TYPE_ASSAULT_RIFLE, type:BUTTON_TYPE_ON_TOUCH,
	name:"M16A4", id:480, fireRate:3, recoil:2, bulletSpeed:ASSAULT_BULLET_SPEED, accuracy:2.5, zoomLevel:ZOOM_ASSAULT, sound:"M14_and_M16A4Shoot.ogg", refillSound:"MP44Reload.ogg", texture:"fishing_rod_uncast", ammo:30, smoke:1, recipe:[
		"   ",
		"iri",
		"   "]
};

const M21 = {
	gunType:GUN_TYPE_SNIPER_RIFLE, type:BUTTON_TYPE_ON_CLICK,
	name:"M21", id:481, fireRate:10, recoil:15, bulletSpeed:SNIPER_BULLET_SPEED, zoomLevel:ZOOM_SNIPER, accuracy:2, sound:"M21Shoot.ogg", refillSound:"BARReload.ogg", texture:"fish_cooked", ammo:10, smoke:1, recipe:[
		"   ",
		"iri",
		"   "]
};

const M40A3_ICE = {
	gunType:GUN_TYPE_SNIPER_RIFLE, type:BUTTON_TYPE_ON_CLICK,
	name:"M40A3 Ice", id:482, fireRate:10, recoil:20, bulletSpeed:SNIPER_BULLET_SPEED, zoomLevel:ZOOM_SNIPER, accuracy:2, sound:"R700_and_M40A3Shoot.ogg", refillSound:"SpringfieldReload.ogg", texture:"fish_raw", ammo:5, smoke:1, recipe:[
		"   ",
		"iri",
		"   "]
};

const M40A3 = {
	gunType:GUN_TYPE_SNIPER_RIFLE, type:BUTTON_TYPE_ON_CLICK,
	name:"M40A3", id:483, fireRate:10, recoil:20, bulletSpeed:SNIPER_BULLET_SPEED, zoomLevel:ZOOM_SNIPER, accuracy:2, sound:"R700_and_M40A3Shoot.ogg", refillSound:"SpringfieldReload.ogg", texture:"flower_pot", ammo:5, smoke:1, recipe:[
		"   ",
		"iri",
		"   "]
};

const M60E4 = {
	gunType:GUN_TYPE_LIGHT_MACHINE, type:BUTTON_TYPE_ON_TOUCH,
	name:"M60E4", id:484, fireRate:3, recoil:7, bulletSpeed:ASSAULT_BULLET_SPEED, accuracy:3.5, zoomLevel:ZOOM_MACHINE, sound:"RPD_and_M60E4_and_RPKShoot.ogg", refillSound:"BrowningReload.ogg", texture:"ghast_tear", ammo:100, smoke:2, recipe:[
		"   ",
		"iri",
		"   "]
};

const M72LAW = {
	gunType:GUN_TYPE_LAUNCHER, type:BUTTON_TYPE_ON_CLICK,
	name:"M72LAW", id:485, fireRate:8, recoil:6, bulletSpeed:BAZOOKA_BULLET_SPEED, hasExplosiveBullets:true, bulletsExplosionRadius:4, bulletsArray:[], accuracy:3.5, zoomLevel:ZOOM_BAZOOKA, sound:"AT4_and_M72LAW_and_Panzerfaust3Shoot.ogg", refillSound:"BazookaReload.ogg", texture:"gold_horse_armor", ammo:1, smoke:4, recipe:[
		"   ",
		"iri",
		"   "]
};

const M249 = {
	gunType:GUN_TYPE_LIGHT_MACHINE, type:BUTTON_TYPE_ON_TOUCH,
	name:"M249", id:486, fireRate:3, recoil:6, bulletSpeed:ASSAULT_BULLET_SPEED, accuracy:3.5, zoomLevel:ZOOM_MACHINE, sound:"M249Shoot.ogg", refillSound:"BrowningReload.ogg", texture:"helmet", textureNumber:1, ammo:100, smoke:2, recipe:[
		"   ",
		"iri",
		"   "]
};

const M1014 = {
	gunType:GUN_TYPE_SHOTGUN, type:BUTTON_TYPE_ON_CLICK,
	name:"M1014", id:487, fireRate:18, recoil:8, bulletSpeed:SHOTGUN_BULLET_SPEED, isShotgun:true, shotgunWidth:2, shotgunBulletsPerLineShot:3, accuracy:10, zoomLevel:ZOOM_SHOTGUN, sound:"M1014Shoot.ogg", refillSound:"M1014Reload.ogg", texture:"hopper", ammo:4, smoke:0, recipe:[
		"   ",
		"iri",
		"   "]
};

const M1887 = {
	gunType:GUN_TYPE_SHOTGUN, type:BUTTON_TYPE_ON_CLICK,
	name:"Model 1887", id:488, fireRate:20, recoil:10, bulletSpeed:SHOTGUN_BULLET_SPEED, isShotgun:true, shotgunWidth:3, shotgunBulletsPerLineShot:3, accuracy:10, zoomLevel:ZOOM_SHOTGUN, sound:"M1887Shoot.ogg", refillSound:"M1887Reload.ogg", texture:"iron_horse_armor", ammo:5, smoke:1, recipe:[
		"   ",
		"iri",
		"   "]
};

const MAKAROV = {
	gunType:GUN_TYPE_HANDGUN, type:BUTTON_TYPE_ON_CLICK,
	name:"Makarov", id:490, fireRate:1, recoil:1, bulletSpeed:PISTOL_BULLET_SPEED, accuracy:8, zoomLevel:ZOOM_PISTOL, sound:"MakarovShoot.ogg", refillSound:"ColtReload.ogg", texture:"item_frame", ammo:8, smoke:0, recipe:[
		"   ",
		"iri",
		"   "]
};

const MINIGUN = {
	gunType:GUN_TYPE_MINIGUN, type:BUTTON_TYPE_ON_TOUCH_WITH_WAIT,
	name:"Minigun", id:491, fireRate:1, recoil:2, bulletSpeed:ASSAULT_BULLET_SPEED, accuracy:5.5, zoomLevel:ZOOM_ASSAULT, sound:"P90_and_Bizon_and_G3Shoot_and_Minigun.ogg", refillSound:"BrowningReload.ogg", texture:"lead", ammo:500, smoke:3, recipe:[
		"   ",
		"iri",
		"   "]
};

const MINI_UZI = {
	gunType:GUN_TYPE_MACHINE_PISTOL, type:BUTTON_TYPE_ON_TOUCH,
	name:"Mini-Uzi", id:492, fireRate:2, recoil:3, bulletSpeed:PISTOL_BULLET_SPEED, accuracy:2.5, zoomLevel:ZOOM_PISTOL, sound:"MiniUziShoot.ogg", refillSound:"ColtReload.ogg", texture:"leggings", textureNumber:1, ammo:32, smoke:1, recipe:[
		"   ",
		"iri",
		"   "]
};

const MP5 = {
	gunType:GUN_TYPE_SUB_MACHINE, type:BUTTON_TYPE_ON_TOUCH,
	name:"MP5", id:493, fireRate:3, recoil:3, bulletSpeed:ASSAULT_BULLET_SPEED, accuracy:2.5, zoomLevel:ZOOM_MACHINE, sound:"MP5Shoot.ogg", refillSound:"StenReload.ogg", texture:"magma_cream", ammo:30, smoke:1, recipe:[
		"   ",
		"iri",
		"   "]
};

const MTAR = {
	gunType:GUN_TYPE_ASSAULT_RIFLE, type:BUTTON_TYPE_ON_TOUCH,
	name:"MTAR", id:494, fireRate:3, recoil:3, bulletSpeed:ASSAULT_BULLET_SPEED, accuracy:3, zoomLevel:ZOOM_ASSAULT, sound:"FNSCAR_and_AUG_and_MTARShoot.ogg", refillSound:"MP44Reload.ogg", texture:"map_empty", ammo:30, smoke:1, recipe:[
		"   ",
		"iri",
		"   "]
};

const P90 = {
	gunType:GUN_TYPE_SUB_MACHINE, type:BUTTON_TYPE_ON_TOUCH,
	name:"P90", id:495, fireRate:2, recoil:2, bulletSpeed:ASSAULT_BULLET_SPEED, accuracy:2.5, zoomLevel:ZOOM_MACHINE, sound:"P90_and_Bizon_and_G3Shoot_and_Minigun.ogg", refillSound:"DP28Reload.ogg", texture:"map_filled", ammo:50, smoke:2, recipe:[
		"   ",
		"iri",
		"   "]
};

const R700 = {
	gunType:GUN_TYPE_SNIPER_RIFLE, type:BUTTON_TYPE_ON_CLICK,
	name:"R700", id:496, fireRate:20, recoil:25, bulletSpeed:SNIPER_BULLET_SPEED, zoomLevel:ZOOM_SNIPER, accuracy:2, sound:"R700_and_M40A3Shoot.ogg", refillSound:"SpringfieldReload.ogg", texture:"melon_speckled", ammo:4, smoke:1, recipe:[
		"   ",
		"iri",
		"   "]
};

const R870 = {
	gunType:GUN_TYPE_SHOTGUN, type:BUTTON_TYPE_ON_CLICK,
	name:"Remington 870", id:497, fireRate:15, recoil:10, bulletSpeed:SHOTGUN_BULLET_SPEED, isShotgun:true, shotgunWidth:3, shotgunBulletsPerLineShot:3, accuracy:11, zoomLevel:ZOOM_SHOTGUN, sound:"R870Shoot.ogg", refillSound:"W1200Reload.ogg", texture:"minecart_chest", ammo:7, smoke:1, recipe:[
		"   ",
		"iri",
		"   "]
};

const RPD = {
	gunType:GUN_TYPE_LIGHT_MACHINE, type:BUTTON_TYPE_ON_TOUCH,
	name:"RPD", id:498, fireRate:3, recoil:6, bulletSpeed:ASSAULT_BULLET_SPEED, accuracy:4, zoomLevel:ZOOM_MACHINE, sound:"RPD_and_M60E4_and_RPKShoot.ogg", refillSound:"MG42Reload.ogg", texture:"minecart_furnace", ammo:100, smoke:2, recipe:[
		"   ",
		"iri",
		"   "]
};

const RPG = {
	gunType:GUN_TYPE_LAUNCHER, type:BUTTON_TYPE_ON_CLICK,
	name:"RPG", id:499, fireRate:40, recoil:25, bulletSpeed:BAZOOKA_BULLET_SPEED, hasExplosiveBullets:true, bulletsExplosionRadius:4, bulletsArray:[], accuracy:16, zoomLevel:ZOOM_BAZOOKA, sound:"RPGShoot.ogg", refillSound:"BazookaReload.ogg", texture:"minecart_hopper", ammo:1, smoke:4, recipe:[
		"   ",
		"iri",
		"   "]
};

const RPK = {
	gunType:GUN_TYPE_ASSAULT_RIFLE, type:BUTTON_TYPE_ON_TOUCH,
	name:"RPK", id:500, fireRate:3, recoil:5, bulletSpeed:ASSAULT_BULLET_SPEED, accuracy:4, zoomLevel:ZOOM_ASSAULT, sound:"RPD_and_M60E4_and_RPKShoot.ogg", refillSound:"MG42Reload.ogg", texture:"quiver", ammo:40, smoke:1, recipe:[
		"   ",
		"iri",
		"   "]
};

const SG550 = {
	gunType:GUN_TYPE_ASSAULT_RIFLE, type:BUTTON_TYPE_ON_CLICK,
	name:"SG550", id:501, fireRate:5, recoil:2, bulletSpeed:ASSAULT_BULLET_SPEED, accuracy:2.5, zoomLevel:ZOOM_ASSAULT, sound:"SG550Shoot.ogg", refillSound:"MP44Reload.ogg", texture:"minecart_tnt", ammo:20, smoke:1, recipe:[
		"   ",
		"iri",
		"   "]
};

const SIGP226 = {
	gunType:GUN_TYPE_HANDGUN, type:BUTTON_TYPE_ON_CLICK,
	name:"SIGP226", id:502, fireRate:1, recoil:3, bulletSpeed:PISTOL_BULLET_SPEED, accuracy:6, zoomLevel:ZOOM_PISTOL, sound:"SIGP226Shoot.ogg", refillSound:"LugerReload.ogg", texture:"name_tag", ammo:10, smoke:0, recipe:[
		"   ",
		"iri",
		"   "]
};

const SKORPION = {
	gunType:GUN_TYPE_MACHINE_PISTOL, type:BUTTON_TYPE_ON_TOUCH,
	name:"Skorpion", id:503, fireRate:3, recoil:2, bulletSpeed:PISTOL_BULLET_SPEED, accuracy:2.5, zoomLevel:ZOOM_PISTOL, sound:"SkorpionShoot.ogg", refillSound:"StenReload.ogg", texture:"nether_star", ammo:20, smoke:1, recipe:[
		"   ",
		"iri",
		"   "]
};

const SPAS = {
	gunType:GUN_TYPE_SHOTGUN, type:BUTTON_TYPE_ON_CLICK,
	name:"SPAS-12", id:504, fireRate:15, recoil:20, bulletSpeed:SHOTGUN_BULLET_SPEED, isShotgun:true, shotgunWidth:3, shotgunBulletsPerLineShot:3, accuracy:25, zoomLevel:ZOOM_SHOTGUN, sound:"W1200_and_SPASShoot.ogg", refillSound:"W1200Reload.ogg", texture:"nether_wart", ammo:6, smoke:1, recipe:[
		"   ",
		"iri",
		"   "]
};

const USP = {
	gunType:GUN_TYPE_HANDGUN, type:BUTTON_TYPE_ON_CLICK,
	name:"USP", id:505, fireRate:1, recoil:1, bulletSpeed:PISTOL_BULLET_SPEED, accuracy:8, zoomLevel:ZOOM_PISTOL, sound:"USPShoot.ogg", refillSound:"TT33Reload.ogg", texture:"potion_bottle_drinkable", ammo:10, smoke:0, recipe:[
		"   ",
		"iri",
		"   "]
};

const W1200 = {
	gunType:GUN_TYPE_SHOTGUN, type:BUTTON_TYPE_ON_CLICK,
	name:"W1200", id:506, fireRate:15, recoil:10, bulletSpeed:SHOTGUN_BULLET_SPEED, isShotgun:true, shotgunWidth:3, shotgunBulletsPerLineShot:3, accuracy:11, zoomLevel:ZOOM_SHOTGUN, sound:"W1200_and_SPASShoot.ogg", refillSound:"W1200Reload.ogg", texture:"potion_bottle_empty", ammo:7, smoke:1, recipe:[
		"   ",
		"iri",
		"   "]
};

// all the guns in a single array
var guns = [AK47, AK74, AT4, AUG, BARRETT_EXPLOSIVE, BARRETT, BIZON, DESERT_EAGLE, DESERT_EAGLE_GOLD, DRAGUNOV, FNSCAR, G3, G36, GL1, GL6, GLOCK, L86, L96, M9, M14, M16A4, M21, M40A3_ICE, M40A3, M60E4, M72LAW, M249, M1014, M1887, MINIGUN, MINI_UZI, MP5, MTAR, P90, R700, R870, RPD, RPG, RPK, SG550, SIGP226, SKORPION, SPAS, USP, W1200];
var explosiveWeapons = [AT4, BARRETT_EXPLOSIVE, M72LAW, RPG];

// add guns
for(var i in guns)
	addNewGun(guns[i]);

// load minigun sounds
var minigunWarmup = new android.media.MediaPlayer();
var minigunSpin = new android.media.MediaPlayer();
minigunSpin.reset();
minigunSpin.setDataSource(sdcard + "/games/com.mojang/dwgm-sounds/MinigunSpin.ogg");
minigunSpin.setLooping(true);
minigunSpin.prepareAsync();

// other items (not guns)
const knifeId = 432;
const knifeMaxDamage = 50;
ModPE.setItem(knifeId, "book_written", 0, "Knife");
Item.setMaxDamage(knifeId, knifeMaxDamage);
Item.addShapedRecipe(knifeId, 1, 0, [
	"iri",
	"r r",
	"iri"], ["i", 265, 0, "r", 331, 0]);

const parachuteId = 433;
const parachuteMaxDamage = 10;
ModPE.setItem(parachuteId, "boat", 0, "Parachute");
Item.setMaxDamage(parachuteId, parachuteMaxDamage);
Item.addShapedRecipe(parachuteId, 1, 0, [
	"iri",
	"r r",
	"iri"], ["i", 265, 0, "r", 331, 0]);
var isParachuting = false;
var countdownHealth = 0;
var previousHealth;

const medicalKitId = 434;
ModPE.setFoodItem(medicalKitId, "book_enchanted", 0, 15, "Medical Kit");

// ammo
const AMMO_ASSAULT_RIFLE_ID = 440;
ModPE.setItem(AMMO_ASSAULT_RIFLE_ID, "record_11", 0, "Assault Rifle Ammo");
Item.addShapedRecipe(AMMO_ASSAULT_RIFLE_ID, 1, 0, [
	"   ",
	" w ",
	"   "], ["w", 17, 0]);

const AMMO_SUB_MACHINE_ID = 441;
ModPE.setItem(AMMO_SUB_MACHINE_ID, "record_13", 0, "Sub Machine Ammo");
Item.addShapedRecipe(AMMO_SUB_MACHINE_ID, 1, 0, [
	"   ",
	" w ",
	"   "], ["w", 17, 0]);

const AMMO_LIGHT_MACHINE_ID = 442;
ModPE.setItem(AMMO_LIGHT_MACHINE_ID, "record_blocks", 0, "Light Machine Ammo");
Item.addShapedRecipe(AMMO_LIGHT_MACHINE_ID, 1, 0, [
	"   ",
	" w ",
	"   "], ["w", 17, 0]);

const AMMO_SNIPER_RIFLE_ID = 443;
ModPE.setItem(AMMO_SNIPER_RIFLE_ID, "record_cat", 0, "Sniper Rifle Ammo");
Item.addShapedRecipe(AMMO_SNIPER_RIFLE_ID, 1, 0, [
	"   ",
	" w ",
	"   "], ["w", 17, 0]);

const AMMO_SHOTGUN_ID = 444;
ModPE.setItem(AMMO_SHOTGUN_ID, "record_chirp", 0, "Shotgun Ammo");
Item.addShapedRecipe(AMMO_SHOTGUN_ID, 1, 0, [
	"   ",
	" w ",
	"   "], ["w", 17, 0]);

const AMMO_MACHINE_PISTOL_ID = 445;
ModPE.setItem(AMMO_MACHINE_PISTOL_ID, "record_far", 0, "Machine PistolAmmo");
Item.addShapedRecipe(AMMO_MACHINE_PISTOL_ID, 1, 0, [
	"   ",
	" w ",
	"   "], ["w", 17, 0]);

const AMMO_HANDGUN_ID = 446;
ModPE.setItem(AMMO_HANDGUN_ID, "record_mall", 0, "Handgun Ammo");
Item.addShapedRecipe(AMMO_HANDGUN_ID, 1, 0, [
	"   ",
	" w ",
	"   "], ["w", 17, 0]);

const AMMO_LAUNCHER_ID = 447;
ModPE.setItem(AMMO_LAUNCHER_ID, "record_mellohi", 0, "Launcher Ammo");
Item.addShapedRecipe(AMMO_LAUNCHER_ID, 1, 0, [
	"   ",
	" w ",
	"   "], ["w", 17, 0]);

const AMMO_MINIGUN_ID = 448;
ModPE.setItem(AMMO_MINIGUN_ID, "record_stal", 0, "Minigun Ammo");
Item.addShapedRecipe(AMMO_MINIGUN_ID, 1, 0, [
	"   ",
	" w ",
	"   "], ["w", 17, 0]);

// grenades
const GRENADE = {
	id:453, grenadeSpeed:2.1, grenadesExplosionRadius:4, grenadesArray:[], accuracy:4, delay:4000
};
ModPE.setItem(GRENADE.id, "potion_overlay", 0, "Grenade");
Item.addShapedRecipe(GRENADE.id, 1, 0, [
	"   ",
	" w ",
	"   "], ["w", 17, 0]);

const FRAGMENT = {
	id:454, grenadeSpeed:2.1, grenadesExplosionRadius:2, grenadesArray:[], fragmentArray:[], howManyFragments:4, fragmentDelay:1000, accuracy:4, delay:4000
};
ModPE.setItem(FRAGMENT.id, "potion_bottle_splash", 0, "Fragment Grenade");
Item.addShapedRecipe(FRAGMENT.id, 1, 0, [
	"   ",
	" w ",
	"   "], ["w", 17, 0]);

const molotovId = 455;
const MOLOTOV = {
	grenadeSpeed:1.5, grenadesExplosionDiameter:4, explodeOnTouch:true, isWithFire:true, grenadesArray:[], accuracy:4
};
ModPE.setItem(molotovId, "book_writable", 0, "Molotov");
Item.addShapedRecipe(molotovId, 1, 0, [
	"   ",
	" w ",
	"   "], ["w", 17, 0]);

// info item
const uiId = 456;
ModPE.setItem(uiId, "apple_golden", 0, "DWGM Info");
Item.addShapedRecipe(uiId, 1, 0, [
	"   ",
	" w ",
	"   "], ["w", 17, 0]);


function selectLevelHook()
{
	// when selecting level
	//
}

function newLevel()
{
	if(initCreativeItems)
	{
		for(var i in guns)
			Player.addItemCreativeInv(guns[i].id, 1);
		Player.addItemCreativeInv(knifeId, 1);
		Player.addItemCreativeInv(parachuteId, 1);

		Player.addItemCreativeInv(GRENADE.id, 1);
		Player.addItemCreativeInv(FRAGMENT.id, 1);
		Player.addItemCreativeInv(molotovId, 1);
		Player.addItemCreativeInv(uiId, 1);
		initCreativeItems = false;
	}
}

function leaveGame()
{
	removeShootAndSettingsButtons();

	displayedMessageNoSound = false;

	previousCarriedItem = 0;
	previousSlotId = 0;

	// release the resources for sounds
	try{
		soundPool.release();
		soundPool = null;
		soundID = null;
	} catch(e){/* soundPool was already released */}

	// fire button variables
	currentShotTicks = 0;

	// for assault rifles
	shooting = false;
	shootingRunnable = null;

	// for minigun
	minigunTouchingFireButton = false;

	// remove explosive bullets
	for(var i in explosiveWeapons)
	{
		explosiveWeapons[i].bulletsArray = [];
	}

	// remove grenades
	GRENADE.grenadesArray = [];

	// remove fragment grenades
	FRAGMENT.grenadesArray = [];

	// remove molotovs
	MOLOTOV.grenadesArray = [];

	// parachute
	isParachuting = false;
	countdownHealth = 0;
	previousHealth;

	// reset fov
	ModPE.resetFov();
	zoomWithFov = 72;
}

function useItem(x, y, z, itemId, blockId, side, itemDamage)
{
	// DWGM infos
	if(itemId == uiId)
	{
		informationsForWeaponsModUI();
		preventDefault();
		return;
	}
}

function attackHook(attacker, victim)
{
	if(attacker = Player.getEntity())
	{
		// knife
		if(Player.getCarriedItem() == knifeId)
		{
			var health = Entity.getHealth(victim) - 20;
			if(health < 0)
				health = 0;
			Entity.setHealth(victim, health);
			Item.damageCarriedItem();
		}
	}
}

function deathHook(murderer, victim)
{
	if(deathWorkaround && victim != Player.getEntity())
	{
		if(Player.getCarriedItem() >= 460 && Player.getCarriedItem() <= 506)
		{
			Entity.remove(victim);
		}
	}
}

function entityRemovedHook(entity)
{
	// remove explosive bullets
	for(var i in explosiveWeapons)
	{
		for(var j in explosiveWeapons[i].bulletsArray)
		{
			if(entity == explosiveWeapons[i].bulletsArray[j].entity)
				explosiveWeapons[i].bulletsArray.splice(j, 1);
		}
	}
}

function changeCarriedItem(currentItem, previousItem)
{
	// prevent infinite shooting
	currentShotTicks = 0;
	shooting = false;

	// remove aiming if the user was aiming
	removeAiming();

	// was refilling ammo
	if(isRefilling)
	{
		try{
			refillSound.stop();
		} catch(e){ ModPE.log("DWGM: error while stopping refillSound: " + e); }
		isRefilling = false;
		ModPE.showTipMessage("Ammo refill interrupted.");
	}

	// release the resources for sounds
	try{
		if(soundPool != null)
			soundPool.release();
		soundPool = null;
		soundID = null;
	} catch(e){ ModPE.log("DWGM: something wrong: " + e); }

	if(previousItem == MINIGUN.id)
	{
		try{
			minigunSpin.stop();
			minigunSpin.prepareAsync();
		} catch(e){
			clientMessage(e);
			ModPE.log(e);
			minigunSpin.reset();
			minigunSpin.setDataSource(sdcard + "/games/com.mojang/dwgm-sounds/MinigunSpin.ogg");
			minigunSpin.setLooping(true);
			minigunSpin.prepareAsync();
		}
	}

	// removing shooting ui of grenades and molotov
	if(previousItem == molotovId || previousItem == GRENADE.id || previousItem == FRAGMENT.id)
	{
		removeShootAndSettingsButtons();
	}

	// the current item is a gun
	if(currentItem >= 460 && currentItem <= 506)
	{
		if(!(previousItem >= 460 && previousItem <= 506))
			shootAndSettingsButtons(true);

		// reset clicks and long clicks
		resetRunnables();
		currentActivity.runOnUiThread(new java.lang.Runnable(
		{
			run: function()
			{
				shotText.setOnTouchListener(new android.view.View.OnTouchListener()
				{
					onTouch: function(v, event)
					{
						return false;
					}
				});
			}
		}));

		// load current gun
		var currentGun = getGun(currentItem);

		// assault rifles, sub machine guns and light machine guns
		if(currentGun.type == BUTTON_TYPE_ON_TOUCH)
		{
			// load sounds for the gun
			ModPE.loadSoundPool(sdcard + "/games/com.mojang/dwgm-sounds/" + currentGun.sound);	

			// load touch events
			currentActivity.runOnUiThread(new java.lang.Runnable(
			{
				run: function()
				{
					if(Level.getGameMode() == 1)
						shotText.setOnTouchListener(new android.view.View.OnTouchListener()
						{
							onTouch: function(v, event)
							{
								onTouchWeaponShootCreative(event, currentGun);
								return false;
							}
						});
					if(Level.getGameMode() == 0)
						shotText.setOnTouchListener(new android.view.View.OnTouchListener()
						{
							onTouch: function(v, event)
							{
								onTouchWeaponShootSurvival(event, currentGun);
								return false;
							}
						});
				}
			}));
		}

		// single shot weapons
		if(currentGun.type == BUTTON_TYPE_ON_CLICK)
		{	
			// load click event
			onClickRunnable = (new java.lang.Runnable(
			{
				run: function()
				{
					onClickWeaponShoot(currentGun);
				}
			}));
		}

		// minigun
		if(currentGun.type == BUTTON_TYPE_ON_TOUCH_WITH_WAIT)
		{
			// load sounds for the gun
			ModPE.loadSoundPool(sdcard + "/games/com.mojang/dwgm-sounds/" + currentGun.sound);

			// load touch events
			currentActivity.runOnUiThread(new java.lang.Runnable(
			{
				run: function()
				{
					if(Level.getGameMode() == 1)
						shotText.setOnTouchListener(new android.view.View.OnTouchListener()
						{
							onTouch: function(v, event)
							{
								minigunShootCreative(event, currentGun);
								return false;
							}
						});
					if(Level.getGameMode() == 0)
						shotText.setOnTouchListener(new android.view.View.OnTouchListener()
						{
							onTouch: function(v, event)
							{
								minigunShootSurvival(event, currentGun);
								return false;
							}
						});
				}
			}));
		}

		// set ammo text
		setAmmoText((currentGun.ammo - Player.getCarriedItemData()) + "/" + currentGun.ammo);
	} else
	{
		if(previousItem >= 460 && previousItem <= 506)
		{
			//the item before was weapon, now not
			removeShootAndSettingsButtons();
		}
	}

	// medical kit explanation
	if(currentItem == medicalKitId)
	{
		if(!displayedMessageMedicalKit)
		{
			clientMessage("In the magic world of MCPE you can eat Medical Kits!");
			clientMessage("Actually a better way of using Medical Kits is currently in development.");
			displayedMessageMedicalKit = true;
		}
	}

	// grenade
	if(currentItem == GRENADE.id)
	{
		shootAndSettingsButtons(false);

		// load click event
		onClickRunnable = (new java.lang.Runnable(
		{
			run: function()
			{
				shootGrenadeHand(GRENADE);
				if(Level.getGameMode() == 0)
					Item.removeOneCarriedItem();
			}
		}));
		setAmmoText(" ");
	}

	// fragment
	if(currentItem == FRAGMENT.id)
	{
		shootAndSettingsButtons(false);

		// load click event
		onClickRunnable = (new java.lang.Runnable(
		{
			run: function()
			{
				shootGrenadeHand(FRAGMENT);
				if(Level.getGameMode() == 0)
					Item.removeOneCarriedItem();
			}
		}));
		setAmmoText(" ");
	}

	// molotov
	if(currentItem == molotovId)
	{
		shootAndSettingsButtons(false);

		// load click event
		onClickRunnable = (new java.lang.Runnable(
		{
			run: function()
			{
				shootGrenadeHand(MOLOTOV);
				if(Level.getGameMode() == 0)
					Item.removeOneCarriedItem();
			}
		}));
		setAmmoText(" ");
	}
}

function modTick()
{
	//change carried item hook
	if(Player.getCarriedItem() != previousCarriedItem)
		changeCarriedItem(Player.getCarriedItem(), previousCarriedItem);
	else
	{
		// switching between items with same id but different damage for example
		if(Player.getSelectedSlotId() != previousSlotId)
		{
			changeCarriedItem(previousCarriedItem, previousCarriedItem);
		}
	}
	previousCarriedItem = Player.getCarriedItem();
	previousSlotId = Player.getSelectedSlotId();

	// assault rifles shooting system
	if(shooting && shootingRunnable != null)
		shootingRunnable.run();
	else
		if(currentShotTicks != 0)
			currentShotTicks = 0;

	// explosive bullets
	for(var i in explosiveWeapons)
	{
		for(var j in explosiveWeapons[i].bulletsArray)
		{
			var arrow = explosiveWeapons[i].bulletsArray[j];
			var xArrow = Entity.getX(arrow.entity);
			var yArrow = Entity.getY(arrow.entity);
			var zArrow = Entity.getZ(arrow.entity);
			if(arrow.previousX == xArrow && arrow.previousY == yArrow && arrow.previousZ == zArrow)
			{
				Level.explode(xArrow, yArrow, zArrow, explosiveWeapons[i].bulletsExplosionRadius);
				
				Entity.remove(arrow.entity);
				explosiveWeapons[i].bulletsArray.splice(j, 1);
			}else
			{
				if(xArrow == 0 && yArrow == 0 && zArrow == 0)
				{
					// the arrow hit an entity
					Level.explode(arrow.previousX, arrow.previousY, arrow.previousZ, explosiveWeapons[i].bulletsExplosionRadius);
				
					explosiveWeapons[i].bulletsArray.splice(j, 1);
				} else
				{
					arrow.previousX = xArrow;
					arrow.previousY = yArrow;
					arrow.previousZ = zArrow;
				}
			}
		}
	}

	// molotov
	for(var i in MOLOTOV.grenadesArray)
	{
		var grenade = MOLOTOV.grenadesArray[i];
		var xGrenade = Entity.getX(grenade.entity);
		var yGrenade = Entity.getY(grenade.entity);
		var zGrenade = Entity.getZ(grenade.entity);
		//ModPE.showTipMessage("x: " + Math.floor(xGrenade) + "y: " + Math.floor(yGrenade) + "z: " + Math.floor(zGrenade));

		if(xGrenade == 0 && yGrenade == 0 && zGrenade == 0)
		{
			// the entity has been removed

			// fire!!!!
			var xStarting = Math.floor(grenade.previousX) - Math.floor(MOLOTOV.grenadesExplosionDiameter / 2);
			var yStarting = Math.floor(grenade.previousY) - Math.floor(MOLOTOV.grenadesExplosionDiameter / 2);
			var zStarting = Math.floor(grenade.previousZ) - Math.floor(MOLOTOV.grenadesExplosionDiameter / 2);
			for(var xExplosion = xStarting; xExplosion <= xStarting + MOLOTOV.grenadesExplosionDiameter; xExplosion++)
			{
				for(var yExplosion = yStarting; yExplosion <= yStarting + MOLOTOV.grenadesExplosionDiameter; yExplosion++)
				{
					for(var zExplosion = zStarting; zExplosion <= zStarting + MOLOTOV.grenadesExplosionDiameter; zExplosion++)
					{
						var setFire = true;
						if(xExplosion == xStarting || xExplosion == xStarting + MOLOTOV.grenadesExplosionDiameter || zExplosion == zStarting || zExplosion == zStarting + MOLOTOV.grenadesExplosionDiameter)
						{
							setFire = java.util.Random().nextBoolean();
						}
						if(setFire && Level.getTile(xExplosion, yExplosion, zExplosion) == 0)
						{
							Level.setTile(xExplosion, yExplosion, zExplosion, 51);
						}
					}
				}
			}

			ModPE.playSoundFromFile("MolotovExplosion.ogg");

			//clientMessage("x: " + Math.floor(grenade.previousX ) + "y: " + Math.floor(grenade.previousY) + "z: " + Math.floor(grenade.previousZ));
			Entity.remove(grenade.entity);
			MOLOTOV.grenadesArray.splice(i, 1);
		}else
		{
			Level.addParticle(5, xGrenade, yGrenade, zGrenade, 0, 0, 0, 1);
			grenade.previousX = xGrenade;
			grenade.previousY = yGrenade;
			grenade.previousZ = zGrenade;
		}
	}

	// parachute
	if(Player.getCarriedItem() == parachuteId)
	{
		if(Player.getCarriedItemData() < parachuteMaxDamage)
		{
			// player will hit the ground soon
			if(isParachuting && Level.getTile(Math.floor(Player.getX()), Math.floor(Player.getY()) - 2, Math.floor(Player.getZ())))
			{
				countdownHealth++;
				if(countdownHealth == 5)
				{
					Player.setHealth(20);
					countdownHealth = 0;
					Player.setHealth(previousHealth);
					isParachuting = false;
					if(Level.getGameMode() == 0)
						Item.damageCarriedItem();
				}
			}

			// player is falling, oh no! We have to help him.
			if(Entity.getVelY(Player.getEntity()) <= -0.5)
			{
				isParachuting = true;
				previousHealth = Entity.getHealth(Player.getEntity());
				if(previousHealth > 20)
				{
					previousHealth = 20;
				}
				Player.setHealth(9999);
			}
		}
	} else
	{
		if(isParachuting)
		{
			Player.setHealth(20);
			countdownHealth = 0;
			Player.setHealth(previousHealth);
			isParachuting = false;
		}
	}
	if(isParachuting)
	{
		// thanks to Anti for this line of code, it works better than making the player riding a chicken (that was my idea)
		Entity.setVelY(Player.getEntity(), -0.10);
	}
}


//########################################################################################################################################################
// Added functions (No GUI and No render)
//########################################################################################################################################################


//########## guns functions ##########
Item.damageCarriedGun = function(gun)
{
	var maxDamage = gun.ammo;
	if(Player.getCarriedItemData() < maxDamage)
		Entity.setCarriedItem(Player.getEntity(), Player.getCarriedItem(), Player.getCarriedItemCount(), Player.getCarriedItemData() + 1);
	setAmmoText(gun.ammo - Player.getCarriedItemData() + "/" + gun.ammo);
}

function addNewGun(gun)
{
	if(gun.textureNumber > 0)
		ModPE.setItem(gun.id, gun.texture, gun.textureNumber, gun.name, 1);
	else
		ModPE.setItem(gun.id, gun.texture, 0, gun.name, 1);
	addCraftingRecipe(gun.id, 1, gun.recipe);
	Item.setMaxDamage(gun.id, gun.ammo);
}

function onTouchWeaponShootSurvival(event, gun)
{
	var action = event.getActionMasked();
	if(action == android.view.MotionEvent.ACTION_CANCEL || action == android.view.MotionEvent.ACTION_UP)
	{
		shooting = false;
		showCloudParticle(gun.smoke);
	}
	else
	{
		if(!shooting)
		{
			shooting = true;
			currentShotTicks = gun.fireRate;
			shootingRunnable = (new java.lang.Runnable(
			{
				run: function()
				{
					if(currentShotTicks == gun.fireRate)
					{
						if(Player.getCarriedItemData() >= gun.ammo)
							ModPE.showTipMessage("Press the ammo text to refill.");
						else
						{
							currentShotTicks = 0;
							ModPE.playLoadedSoundPool(assaultRiflesVolume);
							shootArrow(gun);
							Item.damageCarriedGun(gun);
						}
					}
					currentShotTicks++;
				}
			}));
		}
	}
}

function onTouchWeaponShootCreative(event, gun)
{
	var action = event.getActionMasked();
	if(action == android.view.MotionEvent.ACTION_CANCEL || action == android.view.MotionEvent.ACTION_UP)
	{
		shooting = false;
		showCloudParticle(gun.smoke)
	}
	else
	{
		if(!shooting)
		{
			shooting = true;
			currentShotTicks = gun.fireRate;
			shootingRunnable = (new java.lang.Runnable(
			{
				run: function()
				{
					if(currentShotTicks == gun.fireRate)
					{
						currentShotTicks = 0;
						ModPE.playLoadedSoundPool(assaultRiflesVolume);
						shootArrow(gun);
					}
					currentShotTicks++;
				}
			}));
		}
	}
}

function onClickWeaponShoot(gun)
{
	if(latestShotTime == null || java.lang.System.currentTimeMillis() > (latestShotTime + (gun.fireRate * 50)))
	{
		if(Level.getGameMode() == 0)
		{
			if(Player.getCarriedItemData() >= gun.ammo)
				ModPE.showTipMessage("Press the ammo text to refill.");
			else
			{
				ModPE.playSoundFromFile(gun.sound);
				if(gun.isShotgun)
					shootArrowShotgun(gun);
				else
				{
					if(gun.isGrenadeLauncher)
						shootGrenadeWeapon(gun);
					else
						shootArrow(gun);
				}
				Item.damageCarriedGun(gun);
				latestShotTime = java.lang.System.currentTimeMillis();
				showCloudParticle(gun.smoke);
			}
		}

		if(Level.getGameMode() == 1)
		{
			ModPE.playSoundFromFile(gun.sound);
			if(gun.isShotgun)
				shootArrowShotgun(gun);
			else
			{
				if(gun.isGrenadeLauncher)
					shootGrenadeWeapon(gun);
				else
					shootArrow(gun);
			}
			latestShotTime = java.lang.System.currentTimeMillis();
			showCloudParticle(gun.smoke);
		}
	}
}

function minigunShootSurvival(event)
{
	var action = event.getActionMasked();
	if(action == android.view.MotionEvent.ACTION_CANCEL || action == android.view.MotionEvent.ACTION_UP)
	{
		minigunTouchingFireButton = false;
		if(minigunWarmup.isPlaying())
			minigunWarmup.stop();
		if(shooting)
			showCloudParticle(MINIGUN.smoke);
		shooting = false;
		try{
			minigunSpin.stop();
			minigunSpin.prepareAsync();
		} catch(e){
			clientMessage("A wild error appeared, sorry. See log.");
			ModPE.log("DWGM: Error in minigun shoot: " + e);
			minigunSpin.reset();
			minigunSpin.setDataSource(sdcard + "/games/com.mojang/dwgm-sounds/MinigunSpin.ogg");
			minigunSpin.setLooping(true);
			minigunSpin.prepareAsync();
		}
		ModPE.playSoundFromFile("MinigunCooldown.ogg");
	}
	else
	{
		if(!shooting && !minigunTouchingFireButton)
		{
			minigunTouchingFireButton = true;
			minigunWarmup.reset();
			minigunWarmup.setDataSource(sdcard + "/games/com.mojang/dwgm-sounds/MinigunWarmup.ogg");
			minigunWarmup.prepare();
			minigunWarmup.setOnCompletionListener(new android.media.MediaPlayer.OnCompletionListener()
			{
				onCompletion: function(mp)
				{
					if(minigunTouchingFireButton)
					{
						shooting = true;
						minigunSpin.start();
						currentShotTicks = MINIGUN.fireRate;
						shootingRunnable = (new java.lang.Runnable(
						{
							run: function()
							{
								if(currentShotTicks == MINIGUN.fireRate)
								{
									if(Player.getCarriedItemData() >= MINIGUN.ammo)
										ModPE.showTipMessage("Press the ammo text to refill.");
									else
									{
										currentShotTicks = 0;
										ModPE.playLoadedSoundPool(minigunVolume);
										shootArrow(MINIGUN);
										Item.damageCarriedGun(MINIGUN);
									}
								}
								currentShotTicks++;
							}
						}));
					}
				}
			});
			minigunWarmup.start();
		}
	}
}

function minigunShootCreative(event)
{
	var action = event.getActionMasked();
	if(action == android.view.MotionEvent.ACTION_CANCEL || action == android.view.MotionEvent.ACTION_UP)
	{
		minigunTouchingFireButton = false;
		if(minigunWarmup.isPlaying())
			minigunWarmup.stop();
		if(shooting)
			showCloudParticle(MINIGUN.smoke);
		shooting = false;
		try{
			minigunSpin.stop();
			minigunSpin.prepareAsync();
		} catch(e){
			clientMessage("A wild error appeared, sorry. See log.");
			ModPE.log("DWGM: Error in minigun shoot: " + e);
			minigunSpin.reset();
			minigunSpin.setDataSource(sdcard + "/games/com.mojang/dwgm-sounds/MinigunSpin.ogg");
			minigunSpin.setLooping(true);
			minigunSpin.prepareAsync();
		}
		ModPE.playSoundFromFile("MinigunCooldown.ogg");
	}
	else
	{
		if(!shooting && !minigunTouchingFireButton)
		{
			minigunTouchingFireButton = true;
			minigunWarmup.reset();
			minigunWarmup.setDataSource(sdcard + "/games/com.mojang/dwgm-sounds/MinigunWarmup.ogg");
			minigunWarmup.prepare();
			minigunWarmup.setOnCompletionListener(new android.media.MediaPlayer.OnCompletionListener()
			{
				onCompletion: function(mp)
				{
					if(minigunTouchingFireButton)
					{
						shooting = true;
						minigunSpin.start();
						currentShotTicks = MINIGUN.fireRate;
						shootingRunnable = (new java.lang.Runnable(
						{
							run: function()
							{
								if(currentShotTicks == MINIGUN.fireRate)
								{
									currentShotTicks = 0;
									ModPE.playLoadedSoundPool(minigunVolume);
									shootArrow(MINIGUN);
								}
								currentShotTicks++;
							}
						}));
					}
				}
			});
			minigunWarmup.start();
		}
	}
}

function shootArrowShotgun(gun)
{
	var gunAccuracy;
	if(aiming)
		var gunAccuracy = gun.accuracy - 1;
	else
		var gunAccuracy = gun.accuracy;

	var playerDir = lookDir(getYaw(), getPitch());
	var bulletsPerShotForXY = gun.shotgunWidth / (gun.shotgunBulletsPerLineShot - 1) * 2;
	for(var i = -gun.shotgunWidth; i <= gun.shotgunWidth; i += bulletsPerShotForXY)
	{
		for(var j = -gun.shotgunWidth; j <= gun.shotgunWidth; j += bulletsPerShotForXY)
		{
			var yawAccuracyValue = ( (Math.random() * randomness) - (randomness / 2) ) * gunAccuracy;
			var pitchAccuracyValue = ( (Math.random() * randomness) - (randomness / 2) ) * gunAccuracy;
			var gunShootDir = lookDir(getYaw() + yawAccuracyValue + i, getPitch() + pitchAccuracyValue + j);

			var arrow = Level.spawnMob(getPlayerX() + (playerDir.x * 2), getPlayerY() + (playerDir.y * 2.5), getPlayerZ() + (playerDir.z * 2), 80);
			setVelX(arrow, gunShootDir.x * gun.bulletSpeed);
			setVelY(arrow, gunShootDir.y * gun.bulletSpeed);
			setVelZ(arrow, gunShootDir.z * gun.bulletSpeed);

			if(gun.hasExplosiveBullets)
				gun.bulletsArray.push(new entityClass(arrow));
		}
	}
}

function shootGrenadeWeapon(gun)
{
	var gunAccuracy;
	if(aiming)
		var gunAccuracy = gun.accuracy - 1;
	else
		var gunAccuracy = gun.accuracy;

	var yawAccuracyValue = ( (Math.random() * randomness) - (randomness / 2) ) * gunAccuracy;
	var pitchAccuracyValue = ( (Math.random() * randomness) - (randomness / 2) ) * gunAccuracy;
	var gunShootDir = lookDir(getYaw() + yawAccuracyValue, getPitch() + pitchAccuracyValue);

	var grenade = Level.spawnMob(getPlayerX() + (gunShootDir.x * 2), getPlayerY() + (gunShootDir.y * 2.5), getPlayerZ() + (gunShootDir.z * 2), 65);
	setVelX(grenade, gunShootDir.x * gun.bulletSpeed);
	setVelY(grenade, gunShootDir.y * gun.bulletSpeed);
	setVelZ(grenade, gunShootDir.z * gun.bulletSpeed);
}

function shootGrenadeHand(grenadeObject)
{
	var yawAccuracyValue = ( (Math.random() * randomness) - (randomness / 2) ) * grenadeObject.accuracy;
	var pitchAccuracyValue = ( (Math.random() * randomness) - (randomness / 2) ) * grenadeObject.accuracy;
	var playerShootDir = lookDir(getYaw() + yawAccuracyValue, getPitch() + pitchAccuracyValue);

	var handShootDir = lookDir(getYaw() + 30, getPitch());

	if(grenadeObject.explodeOnTouch)
		var grenade = Level.spawnMob(getPlayerX() + (handShootDir.x * 2), getPlayerY() + (handShootDir.y * 2.5), getPlayerZ() + (handShootDir.z * 2), 81);
	else
	{
		var grenade = Level.spawnMob(getPlayerX() + (handShootDir.x * 2), getPlayerY() + (handShootDir.y * 2.5), getPlayerZ() + (handShootDir.z * 2), 11);
		Entity.setHealth(grenade, 99999);
	}
	setVelX(grenade, playerShootDir.x * grenadeObject.grenadeSpeed);
	setVelY(grenade, playerShootDir.y * grenadeObject.grenadeSpeed);
	setVelZ(grenade, playerShootDir.z * grenadeObject.grenadeSpeed);
	if(grenadeObject.id == GRENADE.id)
	{
		Entity.setRenderType(grenade, grenadeRenderType.renderType);
		Entity.setMobSkin(grenade, "mob/grenade.png");
	}
	if(grenadeObject.id == FRAGMENT.id)
	{
		Entity.setRenderType(grenade, grenadeRenderType.renderType);
		Entity.setMobSkin(grenade, "mob/fraggrenade.png");
	}

	if(grenadeObject.isWithFire)
		Entity.setFireTicks(grenade, 1000);

	grenadeObject.grenadesArray.push(new entityClass(grenade));

	if(!grenadeObject.explodeOnTouch)
	{
		if(grenadeObject.id == FRAGMENT.id)
		{
			new android.os.Handler().postDelayed(new java.lang.Runnable({run: function()
			{
				// push() put the object at the end so the first object ( [0] ) is the object that will explode
				var explosionX = Entity.getX(FRAGMENT.grenadesArray[0].entity);
				var explosionY = Entity.getY(FRAGMENT.grenadesArray[0].entity);
				var explosionZ = Entity.getZ(FRAGMENT.grenadesArray[0].entity);
				Entity.remove(FRAGMENT.grenadesArray[0].entity);
				FRAGMENT.grenadesArray.splice(0, 1);

				for(var i = 0; i < FRAGMENT.howManyFragments; i++)
				{
					var fragment = Level.spawnMob(explosionX + ((Math.random() * 2) - 1), explosionY + ((Math.random() * 2) - 1), explosionZ + ((Math.random() * 2) - 1), 11);
					Entity.setHealth(fragment, 99999);
					Entity.setRenderType(fragment, grenadeRenderType.renderType);
					Entity.setMobSkin(fragment, "mob/fraggrenade.png");
					FRAGMENT.fragmentArray.push(new entityClass(fragment));

					new android.os.Handler().postDelayed(new java.lang.Runnable({run: function()
					{
						//this was just for fun, to enable it comment all the code inside the Handler and uncomment the function
						//fragmentShit();
						var fragmentX = Entity.getX(FRAGMENT.fragmentArray[0].entity);
						var fragmentY = Entity.getY(FRAGMENT.fragmentArray[0].entity);
						var fragmentZ = Entity.getZ(FRAGMENT.fragmentArray[0].entity);
						Entity.remove(FRAGMENT.fragmentArray[0].entity);
						FRAGMENT.fragmentArray.splice(0, 1);

						Level.explode(fragmentX, fragmentY, fragmentZ, FRAGMENT.grenadesExplosionRadius);

					}}), FRAGMENT.fragmentDelay);
				}

				Level.explode(explosionX, explosionY, explosionZ, FRAGMENT.grenadesExplosionRadius);

			}}), grenadeObject.delay);
		}

		if(grenadeObject.id == GRENADE.id)
		{
			new android.os.Handler().postDelayed(new java.lang.Runnable({run: function()
			{
				// push() put the object at the end so the first object ( [0] ) is the object that will explode
				var explosionX = Entity.getX(GRENADE.grenadesArray[0].entity);
				var explosionY = Entity.getY(GRENADE.grenadesArray[0].entity);
				var explosionZ = Entity.getZ(GRENADE.grenadesArray[0].entity);
				Entity.remove(GRENADE.grenadesArray[0].entity);
				GRENADE.grenadesArray.splice(0, 1);

				Level.explode(explosionX, explosionY, explosionZ, GRENADE.grenadesExplosionRadius);

			}}), grenadeObject.delay);
		}
	}
}

function fragmentShit()
{
	/*var explosionX = Entity.getX(FRAGMENT.fragmentArray[0].entity);
	var explosionY = Entity.getY(FRAGMENT.fragmentArray[0].entity);
	var explosionZ = Entity.getZ(FRAGMENT.fragmentArray[0].entity);
	Entity.remove(FRAGMENT.fragmentArray[0].entity);
	FRAGMENT.fragmentArray.splice(0, 1);

	for(var i = 0; i < FRAGMENT.howManyFragments; i++)
	{
		var fragment = Level.spawnMob(explosionX, explosionY, explosionZ, 11);
		Entity.setHealth(fragment, 99999);
		FRAGMENT.fragmentArray.push(new entityClass(fragment));

		new android.os.Handler().postDelayed(new java.lang.Runnable({run: function()
		{
			fragmentShit();
		}}), FRAGMENT.fragmentDelay);
	}

	Level.explode(explosionX, explosionY, explosionZ, FRAGMENT.grenadesExplosionRadius);*/
}

function shootArrow(gun)
{
	var gunAccuracy;
	if(aiming)
		var gunAccuracy = gun.accuracy - 1;
	else
		var gunAccuracy = gun.accuracy;

	var yawAccuracyValue = ( (Math.random() * randomness) - (randomness / 2) ) * gunAccuracy;
	var pitchAccuracyValue = ( (Math.random() * randomness) - (randomness / 2) ) * gunAccuracy;
	var gunShootDir = lookDir(getYaw() + yawAccuracyValue, getPitch() + pitchAccuracyValue);

	var arrow = Level.spawnMob(getPlayerX() + (gunShootDir.x * 2), getPlayerY() + (gunShootDir.y * 2.5), getPlayerZ() + (gunShootDir.z * 2), 80);
	setVelX(arrow, gunShootDir.x * gun.bulletSpeed);
	setVelY(arrow, gunShootDir.y * gun.bulletSpeed);
	setVelZ(arrow, gunShootDir.z * gun.bulletSpeed);

	if(gun.hasExplosiveBullets)
		gun.bulletsArray.push(new entityClass(arrow));
}

function showCloudParticle(amount)
{
	new android.os.Handler().postDelayed(new java.lang.Runnable({run: function()
	{
		var gunDir = lookDir(getYaw() + 30, getPitch());
		for(var i = 0; i < amount; i++)
			Level.addParticle(4, getPlayerX() + (gunDir.x * 1.5), getPlayerY() + (gunDir.y * 1.5), getPlayerZ() + (gunDir.z * 1.5), 0, 0, 0, 1);
	}}), 250);
}

function getGun(id)
{
	var currentGun = 0;
	findTheGun:
	for(var i in guns)
	{
		if(id == guns[i].id)
		{
			currentGun = guns[i];
			break findTheGun;
		}
	}
	if(currentGun == 0)
	{
		clientMessage("Error: no such gun");
		currentGun = AK47;
	}
	return currentGun;
}
//########## guns functions - END ##########

//########## sounds functions ##########
ModPE.playSoundFromFile = function(fileName)
{
	try
	{
		if(sound1 == null || !sound1.isPlaying())
		{
			if(sound1 == null)
				sound1 = new android.media.MediaPlayer();
			sound1.reset();
			sound1.setDataSource(sdcard + "/games/com.mojang/dwgm-sounds/" + fileName);
			sound1.prepare();
			sound1.setOnCompletionListener(new android.media.MediaPlayer.OnCompletionListener()
			{
				onCompletion: function(mp)
				{
					sound1.release();
					sound1 = null;
				}
			});
			sound1.start();
			return;
		}
		if(sound2 == null || !sound2.isPlaying())
		{
			if(sound2 == null)
				sound2 = new android.media.MediaPlayer();
			sound2.reset();
			sound2.setDataSource(sdcard + "/games/com.mojang/dwgm-sounds/" + fileName);
			sound2.prepare();
			sound2.setOnCompletionListener(new android.media.MediaPlayer.OnCompletionListener()
			{
				onCompletion: function(mp)
				{
					sound2.release();
					sound2 = null;
				}
			});
			sound2.start();
			return;
		}
		if(sound3 == null || !sound3.isPlaying())
		{
			if(sound3 == null)
				sound3 = new android.media.MediaPlayer();
			sound3.reset();
			sound3.setDataSource(sdcard + "/games/com.mojang/dwgm-sounds/" + fileName);
			sound3.prepare();
			sound3.setOnCompletionListener(new android.media.MediaPlayer.OnCompletionListener()
			{
				onCompletion: function(mp)
				{
					sound3.release();
					sound3 = null;
				}
			});
			sound3.start();
			return;
		}else
		{
			if(sound1 == null)
				sound1 = new android.media.MediaPlayer();
			sound1.reset();
			sound1.setDataSource(sdcard + "/games/com.mojang/dwgm-sounds/" + fileName);
			sound1.prepare();
			sound1.setOnCompletionListener(new android.media.MediaPlayer.OnCompletionListener()
			{
				onCompletion: function(mp)
				{
					sound1.release();
					sound1 = null;
				}
			});
			sound1.start();
			return;
		}
	}catch(err)
	{
		if(!displayedMessageNoSound)
		{
			ModPE.showTipMessage("DWGM: Sounds not installed!");
			displayedMessageNoSound = true;
			ModPE.log("DWGM: Error in playSoundFromFile: " + err);
		}
	}
}

ModPE.loadSoundPool = function(path)
{
	try
	{
		soundPool = new android.media.SoundPool(6, android.media.AudioManager.STREAM_MUSIC, 0);
		soundID = soundPool.load(path, 1);
	} catch(e)
	{
		ModPE.showTipMessage("DWGM: Sounds not installed!");
		ModPE.log("DWGM: Error in loadSoundPool: " + err);
	}
}

ModPE.playLoadedSoundPool = function(volume)
{
	try
	{
		soundPool.play(soundID, volume, volume, 1, 0, 1.0);
	} catch(e){ /* probably sounds not installed error */ }
}
//########## sounds functions - END ##########

//########## shoot functions ##########
function shootAndSettingsButtons(loadAimButton)
{
	currentActivity.runOnUiThread(new java.lang.Runnable(
	{
		run: function()
		{
			try
			{
				/*var settingsImageSquareLength = settingsPngDecoded.getHeight();
				var settingsImageSquareLengthScaled = settingsImageSquareLength * deviceDensity * 0.3;
				var matrix1 = new android.graphics.Matrix();
				matrix1.postScale(settingsImageSquareLengthScaled / settingsImageSquareLength, settingsImageSquareLengthScaled / settingsImageSquareLength);
				settingsPngScaled = new android.graphics.Bitmap.createBitmap(settingsPngDecoded, 0, 0, settingsImageSquareLength, settingsImageSquareLength, matrix1, true);
				
				popupSettingsImage = new android.widget.PopupWindow();
				var layoutSettingsImage = new android.widget.RelativeLayout(currentActivity);
				
				var settingsImage = new android.widget.ImageView(currentActivity);
				settingsImage.setImageBitmap(settingsPngScaled);
				settingsImage.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function()
					{
						informationsForWeaponsModUI();
					}
				}));
				layoutSettingsImage.addView(settingsImage);

				popupSettingsImage.setContentView(layoutSettingsImage);
				popupSettingsImage.setWidth(settingsImageSquareLengthScaled);
				popupSettingsImage.setHeight(settingsImageSquareLengthScaled);
				popupSettingsImage.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
				popupSettingsImage.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.CENTER, 0, 0);*/


				if(loadAimButton)
				{
					var layoutAim = new android.widget.RelativeLayout(currentActivity);
					layoutAim.setLayoutParams(new android.view.ViewGroup.LayoutParams(android.view.ViewGroup.LayoutParams.WRAP_CONTENT, android.view.ViewGroup.LayoutParams.WRAP_CONTENT));

					var aimBg = android.graphics.drawable.GradientDrawable();
					aimBg.setColor(android.graphics.Color.TRANSPARENT);
					aimBg.setShape(android.graphics.drawable.GradientDrawable.RECTANGLE);
					aimBg.setStroke(1, android.graphics.Color.parseColor("#FFFFFFFF"));
					var aimPadding = Math.floor(2 * deviceDensity);

					var aimText = new android.widget.TextView(currentActivity);
					aimText.setOnClickListener(new android.view.View.OnClickListener()
					{
						onClick: function(v)
						{
							var gun = getGun(Player.getCarriedItem());
							if(gun.gunType == GUN_TYPE_SNIPER_RIFLE)
							{
								aimingGun = gun;
								if(!aiming)
								{
									aiming = true;
									for(var ms = 1; ms < gun.zoomLevel; ms++)
									{
										new android.os.Handler().postDelayed(new java.lang.Runnable({run: function()
										{
											zoomWithFov--;
											ModPE.setFov(zoomWithFov);
										}
										}), ms * 12);
									}
									new android.os.Handler().postDelayed(new java.lang.Runnable({run: function()
									{
										zoomWithFov--;
										ModPE.setFov(zoomWithFov);
										aimImageLayer(aimingGun);
									}
									}), gun.zoomLevel * 12);
								} else
								{
									sightImage();
									removeAiming();
								}
							} else
							{
								if(!aiming)
								{
									aiming = true;
									for(var ms = 1; ms <= gun.zoomLevel; ms++)
									{
										new android.os.Handler().postDelayed(new java.lang.Runnable({run: function()
										{
											zoomWithFov--;
											ModPE.setFov(zoomWithFov);
										}
										}), ms * 12);
									}
								}else
								{
									removeAiming();
								}
							}
							
							return false;
						}
					});
					aimText.setGravity(android.view.Gravity.CENTER);
					aimText.setText("aim");
					aimText.setTypeface(font);
					aimText.setPaintFlags(aimText.getPaintFlags() | android.graphics.Paint.SUBPIXEL_TEXT_FLAG);
					aimText.setTextSize(20);
					aimText.setTextColor(android.graphics.Color.parseColor("#FFFFFFFF"));
					aimText.setShadowLayer(0.0001, Math.round(aimText.getLineHeight() / 8), Math.round(aimText.getLineHeight() / 8), android.graphics.Color.parseColor("#FF333333"));
					aimText.setLayoutParams(new android.view.ViewGroup.LayoutParams(android.view.ViewGroup.LayoutParams.WRAP_CONTENT, android.view.ViewGroup.LayoutParams.WRAP_CONTENT));
					aimText.setBackgroundDrawable(aimBg);
					aimText.setPadding(aimPadding, aimPadding, aimPadding, aimPadding);
					layoutAim.addView(aimText);

					popupAim = new android.widget.PopupWindow(layoutAim, android.view.ViewGroup.LayoutParams.WRAP_CONTENT, android.view.ViewGroup.LayoutParams.WRAP_CONTENT, false);
					popupAim.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
					popupAim.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.CENTER, 0, 0);
				}


				sightImage();


				var layoutShot = new android.widget.RelativeLayout(currentActivity);
				layoutShot.setLayoutParams(new android.view.ViewGroup.LayoutParams(android.view.ViewGroup.LayoutParams.WRAP_CONTENT, android.view.ViewGroup.LayoutParams.WRAP_CONTENT));

				var shotBg = android.graphics.drawable.GradientDrawable();
				shotBg.setColor(android.graphics.Color.TRANSPARENT);
				shotBg.setShape(android.graphics.drawable.GradientDrawable.RECTANGLE);
				shotBg.setStroke(1, android.graphics.Color.parseColor("#FFDE0000"));
				var shotPadding = Math.floor(2 * deviceDensity);

				shotText = new android.widget.TextView(currentActivity);
				shotText.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function(v)
					{
						if(onClickRunnable != null)
							onClickRunnable.run();
						return false;
					}
				});
				shotText.setOnGenericMotionListener(new android.view.View.OnGenericMotionListener()
				{
					onGenericMotion: function(v, event)
					{
						return false;
					}
				});
				shotText.setOnLongClickListener(new android.view.View.OnLongClickListener()
				{
					onLongClick: function(v)
					{
						return false;
					}
				});
				shotText.setOnHoverListener(new android.view.View.OnHoverListener()
				{
					onHover: function(v, event)
					{
						return false;
					}
				});
				shotText.setGravity(android.view.Gravity.CENTER);
				shotText.setText("fire");
				shotText.setTypeface(font);
				shotText.setPaintFlags(shotText.getPaintFlags() | android.graphics.Paint.SUBPIXEL_TEXT_FLAG);
				shotText.setTextSize(20);
				shotText.setTextColor(android.graphics.Color.parseColor("#FFDE0000"));
				shotText.setShadowLayer(0.0001, Math.round(shotText.getLineHeight() / 8), Math.round(shotText.getLineHeight() / 8), android.graphics.Color.parseColor("#FF333333"));
				shotText.setLayoutParams(new android.view.ViewGroup.LayoutParams(android.view.ViewGroup.LayoutParams.WRAP_CONTENT, android.view.ViewGroup.LayoutParams.WRAP_CONTENT));
				shotText.setBackgroundDrawable(shotBg);
				shotText.setPadding(shotPadding, shotPadding, shotPadding, shotPadding);
				layoutShot.addView(shotText);

				popupShot = new android.widget.PopupWindow(layoutShot, android.view.ViewGroup.LayoutParams.WRAP_CONTENT, android.view.ViewGroup.LayoutParams.WRAP_CONTENT, false);
				popupShot.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
				popupShot.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.CENTER, 0, 0);



				if(Level.getGameMode() == 0)
				{
					var layoutAmmo = new android.widget.RelativeLayout(currentActivity);
					layoutAmmo.setLayoutParams(new android.view.ViewGroup.LayoutParams(android.view.ViewGroup.LayoutParams.WRAP_CONTENT, android.view.ViewGroup.LayoutParams.WRAP_CONTENT));

					ammoText = new android.widget.TextView(currentActivity);
					ammoText.setOnClickListener(new android.view.View.OnClickListener()
					{
						onClick: function(v)
						{
							refillAmmo(getGun(Player.getCarriedItem()));
							return false;
						}
					});
					ammoText.setGravity(android.view.Gravity.CENTER);
					ammoText.setText("null");
					ammoText.setTypeface(font);
					ammoText.setPaintFlags(ammoText.getPaintFlags() | android.graphics.Paint.SUBPIXEL_TEXT_FLAG);
					ammoText.setTextSize(14);
					ammoText.setTextColor(android.graphics.Color.parseColor("#FFFFFFFF"));
					ammoText.setShadowLayer(0.001, Math.round(ammoText.getLineHeight() / 8), Math.round(ammoText.getLineHeight() / 8), android.graphics.Color.parseColor("#FF333333"));
					ammoText.setLayoutParams(new android.view.ViewGroup.LayoutParams(android.view.ViewGroup.LayoutParams.WRAP_CONTENT, android.view.ViewGroup.LayoutParams.WRAP_CONTENT));
					layoutAmmo.addView(ammoText);

					popupAmmo = new android.widget.PopupWindow(layoutAmmo, android.view.ViewGroup.LayoutParams.WRAP_CONTENT, android.view.ViewGroup.LayoutParams.WRAP_CONTENT, false);
					popupAmmo.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
					popupAmmo.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.CENTER | android.view.Gravity.BOTTOM, 0, 64 * deviceDensity);
				}
				
			}catch(err)
			{
				clientMessage("Error: " + err);
			}
		}
	}));
}

function sightImage()
{
	currentActivity.runOnUiThread(new java.lang.Runnable(
	{
		run: function()
		{
			try
			{
				var sightImageSquareLength = sightPngDecoded.getHeight();
				var sightImageSquareLengthScaled = sightImageSquareLength * deviceDensity;
				var matrix3 = new android.graphics.Matrix();
				matrix3.postScale(sightImageSquareLengthScaled / sightImageSquareLength, sightImageSquareLengthScaled / sightImageSquareLength);
				sightPngScaled = new android.graphics.Bitmap.createBitmap(sightPngDecoded, 0, 0, sightImageSquareLength, sightImageSquareLength, matrix3, false);
				
				popupSightImage = new android.widget.PopupWindow();
				var layoutSightImage = new android.widget.RelativeLayout(currentActivity);
				
				var sightImage = new android.widget.ImageView(currentActivity);
				sightImage.setImageBitmap(sightPngScaled);
				layoutSightImage.addView(sightImage);

				popupSightImage.setContentView(layoutSightImage);
				popupSightImage.setWidth(sightImageSquareLengthScaled);
				popupSightImage.setHeight(sightImageSquareLengthScaled);
				popupSightImage.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
				popupSightImage.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.CENTER | android.view.Gravity.CENTER, 0, 0);
			}catch(err)
			{
				clientMessage("Error: " + err);
			}
		}
	}));
}

function removeShootAndSettingsButtons()
{
	currentActivity.runOnUiThread(new java.lang.Runnable(
	{
		run: function()
		{
			try{
				popupShot.dismiss();
			} catch (e){}
			try{
				popupSettingsImage.dismiss();
			} catch (e){}
			try{
				popupSightImage.dismiss();
			} catch (e){}
			try{
				popupAmmo.dismiss();
			} catch (e){}
			try{
				popupAim.dismiss();
			} catch (e){}
			try {
				popupAiming.dismiss();
			} catch(e) {}
		}
	}));
	currentShotTicks = 0;
}

function removeAiming()
{
	currentActivity.runOnUiThread(new java.lang.Runnable(
	{
		run: function()
		{
			if(aiming)
			{
				aiming = false;
				var removeAiming = zoomWithFov;
				for(var ms = 1; ms <= (72 - removeAiming); ms++)
				{
					new android.os.Handler().postDelayed(new java.lang.Runnable({run: function()
					{
						zoomWithFov++;
						ModPE.setFov(zoomWithFov);
					}
					}), ms * 12);
				}
			}
			try {
				popupAiming.dismiss();
			} catch(e) {}
		}
	}));
}

function aimImageLayer(gun)
{
	currentActivity.runOnUiThread(new java.lang.Runnable(
	{
		run: function()
		{
			try
			{
				removeShootAndSettingsButtons();
				var imageAimWidth = barretUIDecoded.getWidth();
				var imageAimHeight = barretUIDecoded.getHeight();
				var imageAimHeightScaled = displayHeight;
				var imageAimWidthScaled = imageAimHeightScaled * (imageAimWidth / imageAimHeight);

				if(imageAimWidthScaled > displayWidth)
				{
					var pixelsToBeRemoved = imageAimWidthScaled - displayWidth;
					var pixelsForEachSide = Math.floor(pixelsToBeRemoved / (imageAimWidthScaled / imageAimWidth) / 2);

					var matrix = new android.graphics.Matrix();
					matrix.postScale(imageAimWidthScaled / imageAimWidth, imageAimHeightScaled / imageAimHeight);

					var firstBitmap = new android.graphics.Bitmap.createBitmap(barretUIDecoded, pixelsForEachSide, 0, barretUIDecoded.getWidth() - (pixelsForEachSide * 2), barretUIDecoded.getHeight());
					barretUIScaled = new android.graphics.Bitmap.createBitmap(firstBitmap, 0, 0, firstBitmap.getWidth(), firstBitmap.getHeight(), matrix, true);
				} else
				{
					var matrix = new android.graphics.Matrix();
					matrix.postScale(imageAimWidthScaled / imageAimWidth, imageAimHeightScaled / imageAimHeight);

					barretUIScaled = new android.graphics.Bitmap.createBitmap(barretUIDecoded, 0, 0, barretUIDecoded.getWidth(), barretUIDecoded.getHeight(), matrix, true);
				}
				
				var layoutAiming = new android.widget.LinearLayout(currentActivity);
				layoutAiming.setOrientation(android.widget.LinearLayout.VERTICAL);
				layoutAiming.setFocusableInTouchMode(false);

				var backgroundAimImage = new android.widget.ImageView(currentActivity);
				backgroundAimImage.setImageBitmap(barretUIScaled);
				layoutAiming.addView(backgroundAimImage);

				popupAiming = new android.widget.PopupWindow();
				popupAiming.setContentView(layoutAiming);
				popupAiming.setOutsideTouchable(false);
				popupAiming.setFocusable(false);
				popupAiming.setTouchable(false);
				popupAiming.setAnimationStyle(-1);
				popupAiming.setWidth(displayWidth);
				popupAiming.setHeight(displayHeight);
				popupAiming.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.CENTER | android.view.Gravity.CENTER, 0, 0);

				shootAndSettingsButtons(true);
				setAmmoText((gun.ammo - Player.getCarriedItemData()) + "/" + gun.ammo);
				try {
					popupSightImage.dismiss();
				} catch(e) {}
			}catch(err)
			{
				clientMessage("Error: " + err);
			}
		}
	}));
}

function resetRunnables()
{
	if(shootingRunnable != null)
	{
		shooting = false;
		shootingRunnable = null;
	}
	if(onClickRunnable != null)
		onClickRunnable = null;
}
//########## shoot functions - END ##########

//########## refill functions ##########
function setAmmoText(text)
{
	currentActivity.runOnUiThread(new java.lang.Runnable(
	{
		run: function()
		{
			try
			{
				if(Level.getGameMode() == 0)
					ammoText.setText(text);
			}catch(err)
			{
				clientMessage("Error: " + err);
			}
		}
	}));
}

function refillAmmo(gun)
{
	var slot = Player.getSlotOfItem(getAmmoId(gun));
	if(Player.getCarriedItemData() != 0)
	{
		if(slot == -1)
			clientMessage("You don't have one " + Item.getAmmoName(getAmmoId(gun)) + " ammo in your inventory.");
		else
		{
			try
			{
				isRefilling = true;
				refillingGun = gun;

				refillSound.reset();
				refillSound.setDataSource(sdcard + "/games/com.mojang/dwgm-sounds/reload/" + gun.refillSound);
				refillSound.prepare();
				refillSound.setOnCompletionListener(new android.media.MediaPlayer.OnCompletionListener()
				{
					onCompletion: function(mp)
					{
						isRefilling = false;

						// this code can only be executed with the carried item
						if(Player.getCarriedItem() == refillingGun.id)
						{
							var ammoSlot = Player.getSlotOfItem(getAmmoId(refillingGun));
							if(ammoSlot == -1)
								clientMessage("You don't have one " + Item.getAmmoName(getAmmoId(gun)) + " ammo in your inventory.");
							else
							{
								Entity.setCarriedItem(Player.getEntity(), Player.getCarriedItem(), Player.getCarriedItemCount(), 0);
								setAmmoText((refillingGun.ammo - Player.getCarriedItemData()) + "/" + refillingGun.ammo);
								Player.removeItemFromInventory(ammoSlot, 1);
							}
						}

						// reset sound
						refillSound.release();
						refillSound = null;
						refillSound = new android.media.MediaPlayer();
					}
				});
				refillSound.start();
				ModPE.showTipMessage("Refilling");
			} catch(e)
			{
				ModPE.showTipMessage("Sounds not installed.");
				ModPE.log("DWGM: error in refillAmmo: " + e);
			}
		}
	}
}

function getAmmoId(gun)
{
	switch(gun.gunType)
	{
		case GUN_TYPE_ASSAULT_RIFLE:
		{
			return AMMO_ASSAULT_RIFLE_ID;
		}
		case GUN_TYPE_SUB_MACHINE:
		{
			return AMMO_SUB_MACHINE_ID;
		}
		case GUN_TYPE_LIGHT_MACHINE:
		{
			return AMMO_LIGHT_MACHINE_ID;
		}
		case GUN_TYPE_SNIPER_RIFLE:
		{
			return AMMO_SNIPER_RIFLE_ID;
		}
		case GUN_TYPE_SHOTGUN:
		{
			return AMMO_SHOTGUN_ID;
		}
		case GUN_TYPE_MACHINE_PISTOL:
		{
			return AMMO_MACHINE_PISTOL_ID;
		}
		case GUN_TYPE_HANDGUN:
		{
			return AMMO_HANDGUN_ID;
		}
		case GUN_TYPE_LAUNCHER:
		{
			return AMMO_LAUNCHER_ID;
		}
		case GUN_TYPE_MINIGUN:
		{
			return AMMO_MINIGUN_ID;
		}
		default:
		{
			clientMessage("Error in getAmmoId()");
		}
	}
}

Item.getAmmoName = function(id)
{
	switch(id)
	{
		case AMMO_ASSAULT_RIFLE_ID:
		{
			return "Assault Rifle Ammo";
		}
		case AMMO_SUB_MACHINE_ID:
		{
			return "Sub Machine Ammo";
		}
		case AMMO_LIGHT_MACHINE_ID:
		{
			return "Light Machine Ammo";
		}
		case AMMO_SNIPER_RIFLE_ID:
		{
			return "Sniper Rifle Ammo";
		}
		case AMMO_SHOTGUN_ID:
		{
			return "Shotgun Ammo";
		}
		case AMMO_MACHINE_PISTOL_ID:
		{
			return "Machine Pistol Ammo";
		}
		case AMMO_HANDGUN_ID:
		{
			return "Handgun Ammo";
		}
		case AMMO_LAUNCHER_ID:
		{
			return "Launcher Ammo";
		}
		case AMMO_MINIGUN_ID:
		{
			return "Minigun Ammo";
		}
		default:
		{
			clientMessage("Error in getAmmoName()");
		}
	}
}

Player.getSlotOfItem = function(item, count)
{
	if(count == null || count <= 0)
		count = 1;
	// return -1 if the item wasn't found otherwise returns the inventory slot
	for(var i = 0; i <= 255; i++)
	{
		if(Player.getInventorySlot(i) == item)
		{
			if(Player.getInventorySlotCount(i) >= count)
			{
				return i;
			}
		}
	}
	return -1;
}

Player.removeItemFromInventory = function(slot, count)
{
	if(Player.getInventorySlotCount(slot) > count)
	{
		var id = Player.getInventorySlot(slot);
		var countBefore = Player.getInventorySlotCount(slot);

		Player.clearInventorySlot(slot);
		Player.addItemInventory(id, countBefore - count);
	}
	else
	{
		Player.clearInventorySlot(slot);
	}
}
//########## refill functions - END ##########

//########## other functions ##########
function vector3d(x, y, z)
{
	this.x = x;
	this.y = y;
	this.z = z;
}

function lookDir(yaw, pitch)
{
	var direction = new vector3d(0, 0, 0);
	direction.y = -Math.sin(java.lang.Math.toRadians(pitch));
	direction.x = -Math.sin(java.lang.Math.toRadians(yaw)) * Math.cos(java.lang.Math.toRadians(pitch));
	direction.z = Math.cos(java.lang.Math.toRadians (yaw)) * Math.cos(java.lang.Math.toRadians(pitch));
	return direction;
}

function entityClass(entity)
{
	this.entity = entity;
	this.previousX = 0;
	this.previousY = 0;
	this.previousZ = 0;
}

function addCraftingRecipe(id, howMany, recipe)
{
	// here add other items for crafting with the chosen letter.
	Item.addShapedRecipe(id, howMany, 0, recipe, ["s", 280, 0, "i", 265, 0, "r", 331, 0]);
}

Item.damageCarriedItem = function()
{
	if(Level.getGameMode() == 0)
	{
		var maxDamage;
		if(Player.getCarriedItem() == knifeId)
			maxDamage = knifeMaxDamage;
		if(Player.getCarriedItem() == parachuteId)
			maxDamage = parachuteMaxDamage;

		if(Player.getCarriedItemData() < maxDamage)
			Entity.setCarriedItem(Player.getEntity(), Player.getCarriedItem(), Player.getCarriedItemCount(), Player.getCarriedItemData() + 1);
		else
		{
			Level.playSoundEnt(Player.getEntity(), "random.break", 100, 30);
			if(Player.getCarriedItemCount() == 1)
				Player.clearInventorySlot(Player.getSelectedSlotId());
			else
				Entity.setCarriedItem(Player.getEntity(), Player.getCarriedItem(), Player.getCarriedItemCount() - 1, 0);
		}
	}
}

Item.removeOneCarriedItem = function()
{
	if(Player.getCarriedItemCount() == 1)
		Player.clearInventorySlot(Player.getSelectedSlotId());
	else
		Entity.setCarriedItem(Player.getEntity(), Player.getCarriedItem(), Player.getCarriedItemCount() - 1, 0);
}

function dismissAllUIs()
{
	try{
		popupBlack.dismiss();
	}catch(e){}
}

function writeFileFromByteArray(byteArray, path)
{
	var fontFile = new java.io.File(path);
	if(fontFile.exists())
		fontFile.delete();
	fontFile.createNewFile();
	var fontStream = new java.io.FileOutputStream(fontFile);
	fontStream.write(byteArray);
	fontStream.close();
}

function deleteFile(path)
{
	var file = new java.io.File(path);
	if(file.exists())
		file.delete();
}
//########## other functions - END ##########


//########################################################################################################################################################
// GUI functions
//########################################################################################################################################################

function informationsForWeaponsModUI()
{
	//
	clientMessage("WIP");
}


//########################################################################################################################################################
// Render
//########################################################################################################################################################

// grenade render by Anti, thanks!
function addGrenadeRenderType(renderer)
{
	var model = renderer.getModel();

	var head = model.getPart("head");
	var body = model.getPart("body");
	var rArm = model.getPart("rightArm");
	var lArm = model.getPart("leftArm");
	var rLeg = model.getPart("rightLeg");
	var lLeg = model.getPart("leftLeg");

	head.clear();

	body.clear();
	body.setTextureOffset(0, 0);
	body.addBox(2, 20, 2, 2, 4, 3);
	body.setTextureOffset(8, 0);
	body.addBox(2.5, 20.5, 5, 1, 1, 1);

	rArm.clear();

	lArm.clear();

	rLeg.clear();

	lLeg.clear();
}
     
var grenadeRenderType = Renderer.createHumanoidRenderer();
addGrenadeRenderType(grenadeRenderType);

